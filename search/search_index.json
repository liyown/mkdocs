{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"\u4ecb\u7ecd","text":"<p>\u6b22\u8fce\u6765\u5230\u6211\u7684\u77e5\u8bc6\u5e93\uff0c\u91cc\u9762\u6709\u6211\u6574\u7406\u5230\u7684\u7f51\u7edc\u8d44\u6e90\uff0c\u4ee5\u53ca\u4e00\u4e9b\u81ea\u5df1\u7684\u7b14\u8bb0\u3002</p>"},{"location":"blog/","title":"Blog","text":""},{"location":"blog/2024/04/16/%E6%89%B9%E9%87%8F%E8%8E%B7%E5%8F%96bibtex%E4%B8%80%E6%AD%A5%E5%88%B0%E4%BD%8D/","title":"python\u811a\u672c\uff0c\u6279\u91cf\u83b7\u53d6bibtex","text":"<p>\u9700\u6c42\uff1a\u5728\u4f7f\u7528latex\u5199\u8bba\u6587\u7684\u65f6\u5019\uff0c\u4f60\u662f\u5426\u6709\u8fd9\u4e2a\u9700\u6c42\uff0c\u9700\u8981\u5c06\u5f15\u7528\u8f6c\u6362\u4e3abibtex\u683c\u5f0f\uff0c\u5982\u679c\u6587\u732e\u91cf\u5f88\u5927\uff0c\u8fd9\u4e2a\u91cd\u590d\u5de5\u4f5c\u5b9e\u5728\u4e0d\u503c\u5f97\u505a\uff0c\u5982\u679c\u4f60\u5b9e\u73b0\u4f7f\u7528\u4e86\u6587\u732e\u7ba1\u7406\u5de5\u5177\uff0c\u4f8b\u5982endnote\u3001zotero\uff0c\u53ef\u4ee5\u4e00\u4ef6\u5bfc\u51fa\uff0c\u4f46\u662f\u6ca1\u6709\u7684\u8bdd\uff0c\u672c\u6587\u63d0\u4f9b\u4e00\u4e2a\u89e3\u51b3\u65b9\u6848</p> <p>\u65b9\u6848\uff1acrossref API+google scholar API</p> <p>crossref \u662f\u6700\u5927\u7684\u5916\u6587doi\u53d1\u5e03\u5e73\u53f0\uff0c\u57fa\u672c\u5305\u542b\u4e86\u6240\u6709\u7684\u5916\u6587\u6587\u732e\u7684\u5143\u6570\u636e\uff0c\u4f46\u662f\u4e5f\u6709\u4e00\u4e9b\u5305\u62ec\u4e0d\u9650\u4e8earXiv\u7b49\u6587\u732e\u662f\u67e5\u8be2\u4e0d\u5230\u4e86\uff0c\u8fd9\u4e2a\u65f6\u5019\u9700\u8981google scholar\u5e2e\u5fd9</p> <p>\u4e3a\u4e86\u8282\u7701\u5927\u5bb6\u7684\u65f6\u95f4\uff0c\u8fd9\u4e24\u4e2aapi\u6211\u5df2\u7ecf\u8fdb\u884c\u4e86\u5c01\u88c5\uff0c\u53ea\u9700\u8981\u4f7f\u7528pip\u4e0b\u8f7d\u4e0b\u6765</p> <pre><code>pip install get_bibtex\n</code></pre> <p>\u4e4b\u540e\u53ef\u4ee5\u6309\u7167\u4e0b\u9762\u7684\u4f7f\u7528\u65b9\u6cd5</p> <pre><code>from apiModels.get_bibtex_from_crossref import GetBibTex\nfrom apiModels.get_bibtex_from_google_scholar import GetBibTexFromGoogleScholar\n\nif __name__ == '__main__':\n    google_scholar_api_key = \"your_google_scholar_api_key\"\n    get_bibtex_from_crossref = GetBibTex(\"1536727925@qq.com\")\n    get_bibtex_from_google_scholar = GetBibTexFromGoogleScholar(google_scholar_api_key, GetBibTexFromGoogleScholar.APA)\n\n    with open(\"inputfile/Bibliographyraw.txt\", \"r\", encoding='utf-8') as f:\n        raws = f.readlines()\n\n    # get bibtex from CrossRef and failed search results\n    success_bibtexs_crossref, failed_results = get_bibtex_from_crossref.get_bibtexs(raws)\n\n    # for each failed search result, get bibtex from Google Scholar\n    success_bibtexs_google, failed_results = get_bibtex_from_google_scholar.get_bibtexs(failed_results)\n\n    with open(\"outputfile/BibliographyCrossRef.txt\", \"w\", encoding='utf-8') as f:\n        for bibtex in success_bibtexs_crossref:\n            f.write(bibtex)\n\n    with open(\"outputfile/BibliographyGoogleScholar.txt\", \"w\", encoding='utf-8') as f:\n        for index, bibtex in enumerate(success_bibtexs_google):\n            f.write(\"[]\".format(index) + \" \" + bibtex + \"\\n\")\n\n    with open(\"outputfile/not_find.txt\", \"w\", encoding='utf-8') as f:\n        for result in failed_results:\n            f.write(result+\"\\n\")\n\n    print(\"find bibtex from CrossRef: \", len(success_bibtexs_crossref))\n    print(\"find bibtex from Google Scholar: \", len(success_bibtexs_google))\n    print(\"not find: \", len(failed_results))\n</code></pre> <p>\u5173\u952e\u4ee3\u7801\u89e3\u91ca</p> <pre><code>Bibliographyraw.txt\u91cc\u9762\u662f\u9700\u8981\u67e5\u8be2\u7684\u6587\u4ef6\n\u4f8b\u5982\uff1a\nJ. Hu, L. Shen, S. Albanie, G. Sun, and A. Vedaldi, \u201cGather-Excite: Exploiting Feature Context in Convolutional Neural Networks.\u201d arXiv, Jan. 12, 2019. doi: 10.48550/arXiv.1810.12348.\nX. Wang, R. Girshick, A. Gupta, and K. He, \u201cNon-local Neural Networks.\u201d arXiv, Apr. 13, 2018. doi: 10.48550/arXiv.1711.07971.\n------------------\n</code></pre> <pre><code>success_bibtexs_crossref, failed_results = get_bibtex_from_crossref.get_bibtexs(raws)\n\u8fd4\u56de\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3abibtex\u5217\u8868\uff0c\u7b2c\u4e8c\u4e2a\u4e3a\u6ca1\u6709\u67e5\u8be2\u5230\u7684\u539f\u6587\u732e\n</code></pre> <pre><code>success_bibtexs_google, failed_results = get_bibtex_from_google_scholar.get_bibtexs(failed_results)\n\u5c06\u6ca1\u6709\u67e5\u5230\u7684\u6587\u732e\u7ee7\u7eed\u4f7f\u7528google API\u67e5\u8be2\uff0c\u4e00\u822c\u90fd\u662f\u53ef\u4ee5\u67e5\u8be2\u5230\u4e86\uff0c\u6ca1\u6709\u6587\u732e\u5728google scholar\u67e5\u8be2\u4e0d\u5230\u4e86\u5427\n</code></pre> <pre><code>\u63d0\u793a\uff0c\u8fd9\u91cc\u8fd4\u56de\u7684\u5176\u5b9e\u662fAPA\u683c\u5f0f\u7684\uff0c\u5728\u4e0a\u9762\u521d\u59cb\u5316\u6307\u5b9a\uff0c\u4e5f\u6709\u4e00\u4e2a\u53c2\u6570\u53ef\u4ee5\u8bbe\u7f6e\u8fd4\u56debibtex\u683c\u5f0f\uff0c\u4f8b\u5982\nget_bibtex_from_google_scholar = GetBibTexFromGoogleScholar(google_scholar_api_key, GetBibTexFromGoogleScholar.APA, flag = True)\n\u4f46\u662f\u9700\u8981\u8bbe\u7f6e\u4ee3\u7406\u670d\u52a1\u5668\uff0c\u4f8b\u5982\uff1a\nimport os\nimport re\nimport requests\nos.environ[\"http_proxy\"]=\"127.0.0.1:7890\"\nos.environ[\"https_proxy\"]=\"127.0.0.1:7890\"\n</code></pre> <p>\uff01\uff01\uff01\uff01\uff01\uff01\uff01\u6ce8\u610f\uff1a\u9700\u8981\u5148\u53bb\u7533\u8bf7API\uff0c\u6bcf\u4e2a\u6708\u6709100\u7684\u514d\u8d39\u67e5\u8be2\u6b21\u6570\uff0c\u4e00\u822c\u662f\u591f\u7528\u7684\uff0c\u5728serpapi.com\u7533\u8bf7</p> <p>\u4e4b\u540e\u7684\u4ee3\u7801\u90fd\u4e00\u76ee\u4e86\u7136\u4e86\u54c8\u54c8</p> <p>\u5f53\u7136\u4e5f\u6709\u8bf7\u6c42\u5355\u4e2a\u67e5\u8be2\u7684\uff1a</p> <pre><code>get_bibtex() \u53bb\u6389s\u5c31\u53ef\u4ee5\u4e86 \n</code></pre>"},{"location":"blog/2024/04/16/%E6%89%B9%E9%87%8F%E8%8E%B7%E5%8F%96bibtex%E4%B8%80%E6%AD%A5%E5%88%B0%E4%BD%8D/#2024416","title":"2024.4.16\u66f4\u65b0","text":"<p>1\u3001\u6dfb\u52a0\u4e86DBLP \u63a5\u53e3</p> <pre><code>from apiModels.get_bibtex_from_dblp import GetBibTexFromDBLP\n</code></pre> <p>2\u3001\u63d0\u9ad8\u4f7f\u7528\u4fbf\u6377\u6027</p> <pre><code>\u73b0\u5728\u63d0\u4f9b\u4e00\u4e2a\u5c01\u88c5\u597d\u7684\u7c7b\u63d0\u4f9b\u4f7f\u7528\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u5df2\u7ecf\u5c01\u88c5\u597d\u4e86Crosref\u548cDBLP\u7684API\nfrom apiModels.workflow.crossref2dblp import Crossref2Dblp\n\n\u4f7f\u7528\u65b9\u6cd5\uff08\u65e0google scholar API\uff09\ncrossref2dblp = Crossref2Dblp(\"your email\", \"inputfile/Bibliographyraw.txt\", \"outputfile/Bibliography.txt\")\ncrossref2dblp.running()\n\u5750\u7b49\u8fd0\u884c\u5b8c\u6210\n\n\uff08\u6709\u4e86google scholar API\uff09\nfrom apiModels.workflow.crossref2dblp import Crossref2Dblp\nfrom apiModels.get_bibtex_from_google_scholar import GetBibTexFromGoogleScholar\nget_bibtex_from_google_scholar = GetBibTexFromGoogleScholar(api_key=\"your api key\")\n\u5728\u6700\u540e\u9762\u53c2\u6570\u52a0\u4e0a\u4f60\u5c01\u88c5\u7684API\ncrossref2dblp = Crossref2Dblp(\"1536727925@qq.com\", \"inputfile/Bibliographyraw.txt\", \"outputfile/Bibliography.txt\",get_bibtex_from_google_scholar)\ncrossref2dblp.running()\n\u5750\u7b49\u8fd0\u884c\u5b8c\u6210\n\n\u6216\u8005\u4f60\u60f3\u81ea\u5df1\u5b9a\u4e49api\u4e4b\u95f4\u7684\u8c03\u7528\u987a\u5e8f\nfrom apiModels.workflow.make_workflow import MakeWorkflow\nfrom apiModels.get_bibtex_from_google_scholar import GetBibTexFromGoogleScholar\nfrom apiModels.get_bibtex_from_crossref import GetBibTex\n\nget_bibtex_from_google_scholar = GetBibTexFromGoogleScholar(api_key=\"your api key\")\nget_bibtex_from_crossref = GetBibTex(\"1536727925@qq.com\")\nmake_workflow = MakeWorkflow(\"inputfile/Bibliographyraw.txt\", \"outputfile/Bibliography.txt\", get_bibtex_from_google_scholar, get_bibtex_from_crossref)\nmake_workflow.running()\n\n\u4f7f\u7528\u4e4b\u524d: \npip install get_bibtex = 1.1.0\n</code></pre> <p>\u6b22\u8fce\u6539\u8fdb</p>"},{"location":"blog/2024/07/07/springcloud-sentinel/","title":"seata\u90e8\u7f72","text":""},{"location":"blog/2024/07/07/springcloud-sentinel/#docker-compose-db-nacos","title":"docker-compose db nacos \u6a21\u5f0f","text":""},{"location":"blog/2024/07/07/springcloud-sentinel/#_1","title":"\u51c6\u5907\u6570\u636e\u5e93\u8868","text":"<p>\u6570\u636e\u5e93\u8868: https://github.com/apache/incubator-seata/tree/develop/script/server/db</p>"},{"location":"blog/2024/07/07/springcloud-sentinel/#composeyaml","title":"\u51c6\u5907compose.yaml\u6587\u4ef6","text":"<pre><code>version: \"3.1\"\nservices:\n  seata-server:\n    image: seataio/seata-server:1.5.2\n    ports:\n      - \"7091:7091\"\n      - \"8091:8091\"\n    environment:\n      - STORE_MODE=db\n      # \u4ee5SEATA_IP\u4f5c\u4e3ahost\u6ce8\u518cseata server\n      - SEATA_IP=192.168.208.128\n      - SEATA_PORT=8091\n    volumes:\n      - \"/usr/share/zoneinfo/Asia/Shanghai:/etc/localtime\"        #\u8bbe\u7f6e\u7cfb\u7edf\u65f6\u533a\n      - \"/usr/share/zoneinfo/Asia/Shanghai:/etc/timezone\"  #\u8bbe\u7f6e\u65f6\u533a\n      # \u5047\u8bbe\u6211\u4eec\u901a\u8fc7docker cp\u547d\u4ee4\u628a\u8d44\u6e90\u6587\u4ef6\u62f7\u8d1d\u5230\u76f8\u5bf9\u8def\u5f84`./seata-server/resources`\u4e2d\n      # docker cp \u5bb9\u5668id:/seata-server/resources ./resource \u8fd9\u6b65\u4e0d\u80fd\u5c11\n      # \u5982\u6709\u95ee\u9898\uff0c\u8bf7\u9605\u8bfb\u4e0a\u9762\u7684[\u6ce8\u610f\u4e8b\u9879]\u4ee5\u53ca[\u4f7f\u7528\u81ea\u5b9a\u4e49\u914d\u7f6e\u6587\u4ef6]\n      - \"./resources:/seata-server/resources\"\n    networks:\n    # \u5916\u90e8db\u6570\u636e\u5e93\u7f51\u7edc\uff0c\u9700\u8981\u5148\u542f\u52a8mysql\u5bb9\u5668\uff0c\u53ef\u4ee5\u5355\u72ec\u5e03\u7f6e\uff0c\u6216\u8005\u653e\u5728\u8fd9\u91cc\u4e00\u8d77\u5e03\u7f6e\n      - hm-net\n\nnetworks:\n  hm-net:\n    external: true # \u6765\u81ea\u5916\u90e8\n</code></pre>"},{"location":"blog/2024/07/07/springcloud-sentinel/#applicationyaml","title":"\u51c6\u5907application.yaml\u6587\u4ef6","text":"<p>https://github.com/apache/incubator-seata/blob/develop/server/src/main/resources/application.example.yml</p> <p>application \u4f8b\u5b50 \u6ce8\u610f\uff0c\u5c06/seata-server/resources\u62f7\u8d1d\u51fa\u6765\u540e\u9700\u8981\u5c06\u91cc\u9762\u7684application\u66ff\u6362 <pre><code>server:\n  port: 7091\n\nspring:\n  application:\n    name: seata-server\n\nconsole:\n  user:\n    username: liuyaowen\n    password: 123123\n\nlogging:\n  config: classpath:logback-spring.xml\n  file:\n    path: ${log.home:${user.home}/logs/seata}\n  extend:\n    logstash-appender:\n      destination: 127.0.0.1:4560\n    kafka-appender:\n      bootstrap-servers: 127.0.0.1:9092\n      topic: logback_to_logstash\n\nseata:\n  config:\n    # support: nacos \u3001 consul \u3001 apollo \u3001 zk  \u3001 etcd3\n    type: nacos\n    nacos:\n      server-addr: 192.168.208.128:8848\n      namespace: 9194952e-02a9-4737-89c2-1f3dee3317f0\n      group: SEATA_GROUP\n      username:\n      password:\n      context-path:\n      ##if use MSE Nacos with auth, mutex with username/password attribute\n      #access-key:\n      #secret-key:\n      data-id: seataServer.properties\n  registry:\n    # support: nacos \u3001 eureka \u3001 redis \u3001 zk  \u3001 consul \u3001 etcd3 \u3001 sofa\n    type: nacos\n    preferred-networks: 30.240.*\n    nacos:\n      application: seata-server\n      server-addr: 192.168.208.128:8848\n      group: SEATA_GROUP\n      namespace: 9194952e-02a9-4737-89c2-1f3dee3317f0\n      cluster: default\n      username:\n      password:\n      context-path:\n      ##if use MSE Nacos with auth, mutex with username/password attribute\n      #access-key:\n      #secret-key:\n  security:\n    secretKey: SeataSecretKey0c382ef121d778043159209298fd40bf3850a017\n    tokenValidityInMilliseconds: 1800000\n    ignore:\n      urls: /,/**/*.css,/**/*.js,/**/*.html,/**/*.map,/**/*.svg,/**/*.png,/**/*.ico,/console-fe/public/**,/api/v1/auth/login\n\n  metrics:\n    enabled: false\n    registry-type: compact\n    exporter-list: prometheus\n    exporter-prometheus-port: 9898\n  transport:\n    rpc-tc-request-timeout: 15000\n    enable-tc-server-batch-send-response: false\n    shutdown:\n      wait: 3\n    thread-factory:\n      boss-thread-prefix: NettyBoss\n      worker-thread-prefix: NettyServerNIOWorker\n      boss-thread-size: 1\n</code></pre> \u4e4b\u540e\u8fd8\u9700\u8981\u5728nacos\u4e2d\u914d\u7f6e\u597dseata\u7684\u914d\u7f6e nacos \u914d\u7f6e\u4f8b\u5b50 <pre><code>store.mode=db\n#-----db-----\nstore.db.datasource=druid\nstore.db.dbType=mysql\n# \u9700\u8981\u6839\u636emysql\u7684\u7248\u672c\u8c03\u6574driverClassName\n# mysql8\u53ca\u4ee5\u4e0a\u7248\u672c\u5bf9\u5e94\u7684driver\uff1acom.mysql.cj.jdbc.Driver\n# mysql8\u4ee5\u4e0b\u7248\u672c\u7684driver\uff1acom.mysql.jdbc.Driver\nstore.db.driverClassName=com.mysql.cj.jdbc.Driver\nstore.db.url=jdbc:mysql://xxxx:xxxx/{\u6570\u636e\u5e93\u4e2dseata\u7684\u8868\u540d\u5b57}?useUnicode=true&amp;characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useSSL=false\nstore.db.user=root\nstore.db.password=mysql_lyw\n# \u6570\u636e\u5e93\u521d\u59cb\u8fde\u63a5\u6570\nstore.db.minConn=1\n# \u6570\u636e\u5e93\u6700\u5927\u8fde\u63a5\u6570\nstore.db.maxConn=20\n# \u83b7\u53d6\u8fde\u63a5\u65f6\u6700\u5927\u7b49\u5f85\u65f6\u95f4 \u9ed8\u8ba45000\uff0c\u5355\u4f4d\u6beb\u79d2\nstore.db.maxWait=5000\n# \u5168\u5c40\u4e8b\u52a1\u8868\u540d \u9ed8\u8ba4global_table\nstore.db.globalTable=global_table\n# \u5206\u652f\u4e8b\u52a1\u8868\u540d \u9ed8\u8ba4branch_table\nstore.db.branchTable=branch_table\n# \u5168\u5c40\u9501\u8868\u540d \u9ed8\u8ba4lock_table\nstore.db.lockTable=lock_table\nstore.db.distributedLockTable=distributed_lock\n# \u67e5\u8be2\u5168\u5c40\u4e8b\u52a1\u4e00\u6b21\u7684\u6700\u5927\u6761\u6570 \u9ed8\u8ba4100\nstore.db.queryLimit=100\n\n\n# undo\u4fdd\u7559\u5929\u6570 \u9ed8\u8ba47\u5929,log_status=1\uff08\u9644\u5f553\uff09\u548c\u672a\u6b63\u5e38\u6e05\u7406\u7684undo\nserver.undo.logSaveDays=7\n# undo\u6e05\u7406\u7ebf\u7a0b\u95f4\u9694\u65f6\u95f4 \u9ed8\u8ba486400000\uff0c\u5355\u4f4d\u6beb\u79d2\nserver.undo.logDeletePeriod=86400000\n# \u4e8c\u9636\u6bb5\u63d0\u4ea4\u91cd\u8bd5\u8d85\u65f6\u65f6\u957f \u5355\u4f4dms,s,m,h,d,\u5bf9\u5e94\u6beb\u79d2,\u79d2,\u5206,\u5c0f\u65f6,\u5929,\u9ed8\u8ba4\u6beb\u79d2\u3002\u9ed8\u8ba4\u503c-1\u8868\u793a\u65e0\u9650\u91cd\u8bd5\n# \u516c\u5f0f: timeout&gt;=now-globalTransactionBeginTime,true\u8868\u793a\u8d85\u65f6\u5219\u4e0d\u518d\u91cd\u8bd5\n# \u6ce8: \u8fbe\u5230\u8d85\u65f6\u65f6\u95f4\u540e\u5c06\u4e0d\u4f1a\u505a\u4efb\u4f55\u91cd\u8bd5,\u6709\u6570\u636e\u4e0d\u4e00\u81f4\u98ce\u9669,\u9664\u975e\u4e1a\u52a1\u81ea\u884c\u53ef\u6821\u51c6\u6570\u636e,\u5426\u8005\u614e\u7528\nserver.maxCommitRetryTimeout=-1\n# \u4e8c\u9636\u6bb5\u56de\u6eda\u91cd\u8bd5\u8d85\u65f6\u65f6\u957f\nserver.maxRollbackRetryTimeout=-1\n# \u4e8c\u9636\u6bb5\u63d0\u4ea4\u672a\u5b8c\u6210\u72b6\u6001\u5168\u5c40\u4e8b\u52a1\u91cd\u8bd5\u63d0\u4ea4\u7ebf\u7a0b\u95f4\u9694\u65f6\u95f4 \u9ed8\u8ba41000\uff0c\u5355\u4f4d\u6beb\u79d2\nserver.recovery.committingRetryPeriod=1000\n# \u4e8c\u9636\u6bb5\u5f02\u6b65\u63d0\u4ea4\u72b6\u6001\u91cd\u8bd5\u63d0\u4ea4\u7ebf\u7a0b\u95f4\u9694\u65f6\u95f4 \u9ed8\u8ba41000\uff0c\u5355\u4f4d\u6beb\u79d2\nserver.recovery.asynCommittingRetryPeriod=1000\n# \u4e8c\u9636\u6bb5\u56de\u6eda\u72b6\u6001\u91cd\u8bd5\u56de\u6eda\u7ebf\u7a0b\u95f4\u9694\u65f6\u95f4  \u9ed8\u8ba41000\uff0c\u5355\u4f4d\u6beb\u79d2\nserver.recovery.rollbackingRetryPeriod=1000\n# \u8d85\u65f6\u72b6\u6001\u68c0\u6d4b\u91cd\u8bd5\u7ebf\u7a0b\u95f4\u9694\u65f6\u95f4 \u9ed8\u8ba41000\uff0c\u5355\u4f4d\u6beb\u79d2\uff0c\u68c0\u6d4b\u51fa\u8d85\u65f6\u5c06\u5168\u5c40\u4e8b\u52a1\u7f6e\u5165\u56de\u6eda\u4f1a\u8bdd\u7ba1\u7406\u5668\nserver.recovery.timeoutRetryPeriod=1000\n\nconsole.user.username=liuyaowen\nconsole.user.password=123123\n</code></pre></p>"},{"location":"blog/2024/07/07/springcloud-sentinel/#_2","title":"\u62c9\u8d77\u670d\u52a1","text":"<pre><code>docker-compose -f docker-compose.yaml up\n</code></pre>"},{"location":"blog/2024/07/07/springcloud-sentinel/#_3","title":"\u6587\u4ef6\u5efa\u6784","text":"<pre><code>\u251c\u2500\u2500 docker-compose.yaml\n\u251c\u2500\u2500 resources\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 application.yaml\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 banner.txt\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 io\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 logback\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 logback-spring.xml\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 lua\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 META-INF\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 README.md\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 README-zh.md\n</code></pre>"},{"location":"blog/2024/07/07/springcloud-sentinel/#_4","title":"\u7b80\u5355\u4f7f\u7528","text":""},{"location":"blog/2024/07/07/springcloud-sentinel/#id","title":"\u5f15\u5165id","text":"<pre><code>\u5f53\u7136\uff0cdiscovery,springcloud,springcloudAlibaba,\u90fd\u8981\u63d0\u524d\u51c6\u5907\n&lt;dependency&gt;\n    &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-cloud-starter-alibaba-seata&lt;/artifactId&gt;\n&lt;/dependency&gt;\n</code></pre>"},{"location":"blog/2024/07/07/springcloud-sentinel/#_5","title":"\u914d\u7f6e","text":"<pre><code>seata:\n    registry:\n        type: nacos\n        nacos:\n            application: seata-server\n            server-addr: 192.168.208.128:8848\n            group: SEATA_GROUP\n            namespace: 9194952e-02a9-4737-89c2-1f3dee3317f0\n            username:\n            password:\n    tx-service-group: hmall\n    service: \n        vgroup-mapping:\n        &lt;!-- \u5bf9\u5e94\u4e8b\u52a1\u7ec4\u7684\u96c6\u7fa4\u4f4d\u7f6e --&gt;\n            hmall: \"default\"\n</code></pre>"},{"location":"blog/2024/07/07/springcloud-sentinel/#at","title":"AT \u6a21\u5f0f","text":"<pre><code>-- \u6ce8\u610f\u6b64\u59040.7.0+ \u589e\u52a0\u5b57\u6bb5 context\nCREATE TABLE `undo_log` (\n  `id` bigint(20) NOT NULL AUTO_INCREMENT,\n  `branch_id` bigint(20) NOT NULL,\n  `xid` varchar(100) NOT NULL,\n  `context` varchar(128) NOT NULL,\n  `rollback_info` longblob NOT NULL,\n  `log_status` int(11) NOT NULL,\n  `log_created` datetime NOT NULL,\n  `log_modified` datetime NOT NULL,\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `ux_undo_log` (`xid`,`branch_id`)\n) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;\n</code></pre>"},{"location":"blog/2024/07/15/springcloud/","title":"springcloud \u73af\u5883\u642d\u5efa docker-compose \u6a21\u5f0f","text":"<p>\u4e00\u4efd\u7528\u4e8e\u5b66\u4e60springcloud\u7684\u5feb\u901f\u642d\u5efa\u670d\u52a1\u5907\u5fd8\u5f55</p>"},{"location":"blog/2024/07/15/springcloud/#yamal","title":"yamal \u6587\u4ef6","text":"<pre><code>version: \"3\"\nservices:\n\n  # nacos \u73af\u5883\uff1a\u5355\u673a\n  # 1\u3001\u9700\u8981\u51c6\u5907\u6570\u636e\u5e93\u8868 \u89c1\u4e0b\u9762 &gt;nacos\u6570\u636e\u5e93\u8868 \n  # 2\u3001\u51c6\u5907\u542f\u52a8\u73af\u5883 \u89c1\u4e0b\u9762 &gt;nacos-standlone-mysql.env\n  # 3\u3001\u5b98\u7f51\u6559\u7a0b\uff1ahttps://nacos.io/docs/next/manual/admin/deployment/deployment-standalone/\n  nacos:\n    image: nacos/nacos-server:latest\n    container_name: nacosnacos-standlone-mysql.env\n    env_file:\n      # \u8fd9\u91cc\u6302\u8f7d\u73af\u5883\n      - /home/liu/nacos-docker/env/nacos-standlone-mysql.env\n    volumes:\n      - /home/liu/nacos-logs/standalone-logs/:/home/nacos/logs\n      - /home/liu/wait-it.sh:/home/liu/wait-it.sh\n    ports:\n      - \"8848:8848\"\n      - \"9848:9848\"\n      - \"9849:9849\"\n    restart: always\n    # \u7b49\u5f85mysql\u670d\u52a1\u542f\u52a8\uff0c\u9700\u8981\u63d0\u524d\u51c6\u5907\u8fd9\u4e2a\u6587\u4ef6\uff0cgithub\u6709\uff0c\u5982\u679c\u4f7f\u7528\u5916\u90e8sql\u670d\u52a1\u5c31\u4e0d\u9700\u8981\uff0c\u4f46\u662f\u9700\u8981\u66f4\u6539nacos-standlone-mysql.env\u4e2d\u7684\u914d\u7f6e\n    command: bash -c \"chmod +x /home/liu/wait-it.sh &amp;&amp; /home/liu/wait-it.sh mysql:3306 --timeout=30 --echo 'mysql is up'\"\n    depends_on:\n      - mysql\n\n    networks:\n      - cloud-net\n  # mysql \u4e3anacos\u670d\u52a1\n  mysql: # \u670d\u52a1\u540d\u79f0\n    image: mysql:latest # \u6216\u5176\u5b83mysql\u7248\u672c\n    container_name: mysql8 # \u5bb9\u5668\u540d\u79f0\n    environment:\n      - MYSQL_ROOT_PASSWORD=mysql_liu \n#      - TZ=Asia/Shanghai # \u8bbe\u7f6e\u5bb9\u5668\u65f6\u533a \u6211\u8fd9\u91cc\u901a\u8fc7\u4e0b\u9762\u6302\u8f7d\u65b9\u5f0f\u540c\u6b65\u7684\u5bbf\u4e3b\u673a\u65f6\u533a\u548c\u65f6\u95f4\u4e86,\u8fd9\u91cc\u5ffd\u7565\n    volumes:\n      - mysql:/var/lib/mysql\n      - /home/docker/mysql8/log:/var/log/mysql \n      - /home/docker/mysql8/conf.d:/etc/mysql/conf.d \n      - /etc/localtime:/etc/localtime:ro \n    networks:\n      - cloud-net\n    ports:\n      - 3306:3306 \n    # \u6307\u5b9a\u5bbf\u4e3b\u673a\u7aef\u53e3\u4e0e\u5bb9\u5668\u7aef\u53e3\u6620\u5c04\u5173\u7cfb\uff0c\u5bbf\u4e3b\u673a:\u5bb9\u5668\n    restart: always # \u5bb9\u5668\u968fdocker\u542f\u52a8\u81ea\u542f\n  # \u5206\u5e03\u5f0f\u4e8b\u52a1 \n  # 1\u3001\u5c06resource\u62f7\u8d1d\u51fa\u6765 docker cp \u5bb9\u5668\u540d\u5b57:/seata-server/resources \u81ea\u5df1linux\u670d\u52a1\u7b2c\u5730\u5740\u4f8b\u5982/home/liu/seata/resources\n  # 2\u3001\u914d\u7f6e\u597d\u91cc\u9762\u7684application\uff0c\u6a21\u677f\uff1ahttps://github.com/apache/incubator-seata/blob/develop/server/src/main/resources/application.example.yml\n  # 3\u3001\u5c06\u914d\u7f6e\u597d\u7684nacos\u4e2d\u6dfb\u52a0seata\u914d\u7f6e \u4f8b\u5b50\u89c1\uff1a\u4e0b\u9762\u7684 &gt;seataServer.properties\n  # 4\u3001\u5b98\u7f51\u6559\u7a0b\uff1ahttps://seata.apache.org/zh-cn/docs/ops/deploy-by-docker-compose\n  seata-server:\n    image: seataio/seata-server:1.5.2\n    container_name: seata\n    ports:\n      - \"7091:7091\"\n      - \"8091:8091\"\n    environment:\n      - STORE_MODE=db\n      # \u4ee5SEATA_IP\u4f5c\u4e3ahost\u6ce8\u518cseata server\n      - SEATA_IP=192.168.208.128\n      - SEATA_PORT=8091\n    volumes:\n      - \"/usr/share/zoneinfo/Asia/Shanghai:/etc/localtime\"        #\u8bbe\u7f6e\u7cfb\u7edf\u65f6\u533a\n      - \"/usr/share/zoneinfo/Asia/Shanghai:/etc/timezone\"  #\u8bbe\u7f6e\u65f6\u533a\n      # \u5047\u8bbe\u6211\u4eec\u901a\u8fc7docker cp\u547d\u4ee4\u628a\u8d44\u6e90\u6587\u4ef6\u62f7\u8d1d\u5230\u76f8\u5bf9\u8def\u5f84`./seata-server/resources`\u4e2d\n      # \u5982\u6709\u95ee\u9898\uff0c\u8bf7\u9605\u8bfb\u4e0a\u9762\u7684[\u6ce8\u610f\u4e8b\u9879]\u4ee5\u53ca[\u4f7f\u7528\u81ea\u5b9a\u4e49\u914d\u7f6e\u6587\u4ef6]\n      - \"/home/liu/seata/resources:/seata-server/resources\"\n    depends_on:\n      - nacos\n\n    restart: always  \n\n    networks:\n      - cloud-net\n\n  # 1\u3001\u542f\u52a8\u540e\u914d\u7f6e\u5ef6\u65f6\u961f\u5217\u63d2\u4ef6 docker exec -it rabbitmq rabbitmq-plugins enable rabbitmq_delayed_message_exchange\n  # 2\u3001\u5b98\u7f51\u6559\u7a0b\uff1ahttps://hub.docker.com/_/rabbitmq/\n  rabbitmq:\n    image: rabbitmq:3.8-management\n    container_name: rabbitmq\n    hostname: my-rabbit\n    ports:\n      - \"5672:5672\"\n      - \"15672:15672\"\n    networks:\n      - cloud-net\n    environment:\n      RABBITMQ_DEFAULT_USER: user\n      RABBITMQ_DEFAULT_PASS: password\n    volumes:\n      - mq_plugins:/plugins\n\n  # \u5b98\u7f51\u6559\u7a0b\uff1a https://www.elastic.co/guide/en/elasticsearch/reference/current/run-elasticsearch-locally.html\n  kibana:\n    image: docker.elastic.co/kibana/kibana:7.12.1\n    container_name: kibana\n    networks:\n      - cloud-net\n    ports:\n      - \"5601:5601\"\n    environment:\n      ELASTICSEARCH_URL: http://es:9200\n      ELASTICSEARCH_HOSTS: http://es:9200\n      ELASTICSEARCH_USERNAME: user\n      ELASTICSEARCH_PASSWORD: password\n      xpack.security.enabled: \"false\"\n      xpack.license.self_generated.type: trial\n    depends_on:\n      - es\n\n\n  es:\n    image: docker.elastic.co/elasticsearch/elasticsearch:7.12.1\n    container_name: es\n    networks:\n      - cloud-net\n    ports:\n      - \"9200:9200\"\n    environment:\n      ELASTIC_PASSWORD: password\n      discovery.type: \"single-node\"\n      xpack.security.http.ssl.enabled: \"false\"\n      xpack.license.self_generated.type: trial\n    volumes:\n      - esdata:/usr/share/elasticsearch/data  # \u6301\u4e45\u5316Elasticsearch\u6570\u636e\n\nnetworks:\n  cloud-net:\n\nvolumes:\n  esdata:  # \u5b9a\u4e49\u6301\u4e45\u5316\u5b58\u50a8\u5377\n  mysql:\n  mq_plugins:  # \u5b9a\u4e49\u6301\u4e45\u5316\u5b58\u50a8\u5377\uff0c\u7528\u4e8e\u5b58\u50a8 RabbitMQ \u63d2\u4ef6\n</code></pre>"},{"location":"blog/2024/07/15/springcloud/#nacos","title":"nacos \u914d\u7f6e","text":""},{"location":"blog/2024/07/15/springcloud/#sql","title":"sql","text":"<pre><code>/******************************************/\n/*   \u8868\u540d\u79f0 = config_info                  */\n/******************************************/\nCREATE TABLE `config_info` (\n  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id',\n  `data_id` varchar(255) NOT NULL COMMENT 'data_id',\n  `group_id` varchar(128) DEFAULT NULL COMMENT 'group_id',\n  `content` longtext NOT NULL COMMENT 'content',\n  `md5` varchar(32) DEFAULT NULL COMMENT 'md5',\n  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '\u521b\u5efa\u65f6\u95f4',\n  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '\u4fee\u6539\u65f6\u95f4',\n  `src_user` text COMMENT 'source user',\n  `src_ip` varchar(50) DEFAULT NULL COMMENT 'source ip',\n  `app_name` varchar(128) DEFAULT NULL COMMENT 'app_name',\n  `tenant_id` varchar(128) DEFAULT '' COMMENT '\u79df\u6237\u5b57\u6bb5',\n  `c_desc` varchar(256) DEFAULT NULL COMMENT 'configuration description',\n  `c_use` varchar(64) DEFAULT NULL COMMENT 'configuration usage',\n  `effect` varchar(64) DEFAULT NULL COMMENT '\u914d\u7f6e\u751f\u6548\u7684\u63cf\u8ff0',\n  `type` varchar(64) DEFAULT NULL COMMENT '\u914d\u7f6e\u7684\u7c7b\u578b',\n  `c_schema` text COMMENT '\u914d\u7f6e\u7684\u6a21\u5f0f',\n  `encrypted_data_key` text NOT NULL COMMENT '\u5bc6\u94a5',\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `uk_configinfo_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='config_info';\n\n/******************************************/\n/*   \u8868\u540d\u79f0 = config_info_aggr             */\n/******************************************/\nCREATE TABLE `config_info_aggr` (\n  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id',\n  `data_id` varchar(255) NOT NULL COMMENT 'data_id',\n  `group_id` varchar(128) NOT NULL COMMENT 'group_id',\n  `datum_id` varchar(255) NOT NULL COMMENT 'datum_id',\n  `content` longtext NOT NULL COMMENT '\u5185\u5bb9',\n  `gmt_modified` datetime NOT NULL COMMENT '\u4fee\u6539\u65f6\u95f4',\n  `app_name` varchar(128) DEFAULT NULL COMMENT 'app_name',\n  `tenant_id` varchar(128) DEFAULT '' COMMENT '\u79df\u6237\u5b57\u6bb5',\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `uk_configinfoaggr_datagrouptenantdatum` (`data_id`,`group_id`,`tenant_id`,`datum_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='\u589e\u52a0\u79df\u6237\u5b57\u6bb5';\n\n\n/******************************************/\n/*   \u8868\u540d\u79f0 = config_info_beta             */\n/******************************************/\nCREATE TABLE `config_info_beta` (\n  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id',\n  `data_id` varchar(255) NOT NULL COMMENT 'data_id',\n  `group_id` varchar(128) NOT NULL COMMENT 'group_id',\n  `app_name` varchar(128) DEFAULT NULL COMMENT 'app_name',\n  `content` longtext NOT NULL COMMENT 'content',\n  `beta_ips` varchar(1024) DEFAULT NULL COMMENT 'betaIps',\n  `md5` varchar(32) DEFAULT NULL COMMENT 'md5',\n  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '\u521b\u5efa\u65f6\u95f4',\n  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '\u4fee\u6539\u65f6\u95f4',\n  `src_user` text COMMENT 'source user',\n  `src_ip` varchar(50) DEFAULT NULL COMMENT 'source ip',\n  `tenant_id` varchar(128) DEFAULT '' COMMENT '\u79df\u6237\u5b57\u6bb5',\n  `encrypted_data_key` text NOT NULL COMMENT '\u5bc6\u94a5',\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `uk_configinfobeta_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='config_info_beta';\n\n/******************************************/\n/*   \u8868\u540d\u79f0 = config_info_tag              */\n/******************************************/\nCREATE TABLE `config_info_tag` (\n  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id',\n  `data_id` varchar(255) NOT NULL COMMENT 'data_id',\n  `group_id` varchar(128) NOT NULL COMMENT 'group_id',\n  `tenant_id` varchar(128) DEFAULT '' COMMENT 'tenant_id',\n  `tag_id` varchar(128) NOT NULL COMMENT 'tag_id',\n  `app_name` varchar(128) DEFAULT NULL COMMENT 'app_name',\n  `content` longtext NOT NULL COMMENT 'content',\n  `md5` varchar(32) DEFAULT NULL COMMENT 'md5',\n  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '\u521b\u5efa\u65f6\u95f4',\n  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '\u4fee\u6539\u65f6\u95f4',\n  `src_user` text COMMENT 'source user',\n  `src_ip` varchar(50) DEFAULT NULL COMMENT 'source ip',\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `uk_configinfotag_datagrouptenanttag` (`data_id`,`group_id`,`tenant_id`,`tag_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='config_info_tag';\n\n/******************************************/\n/*   \u8868\u540d\u79f0 = config_tags_relation         */\n/******************************************/\nCREATE TABLE `config_tags_relation` (\n  `id` bigint(20) NOT NULL COMMENT 'id',\n  `tag_name` varchar(128) NOT NULL COMMENT 'tag_name',\n  `tag_type` varchar(64) DEFAULT NULL COMMENT 'tag_type',\n  `data_id` varchar(255) NOT NULL COMMENT 'data_id',\n  `group_id` varchar(128) NOT NULL COMMENT 'group_id',\n  `tenant_id` varchar(128) DEFAULT '' COMMENT 'tenant_id',\n  `nid` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'nid, \u81ea\u589e\u957f\u6807\u8bc6',\n  PRIMARY KEY (`nid`),\n  UNIQUE KEY `uk_configtagrelation_configidtag` (`id`,`tag_name`,`tag_type`),\n  KEY `idx_tenant_id` (`tenant_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='config_tag_relation';\n\n/******************************************/\n/*   \u8868\u540d\u79f0 = group_capacity               */\n/******************************************/\nCREATE TABLE `group_capacity` (\n  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT COMMENT '\u4e3b\u952eID',\n  `group_id` varchar(128) NOT NULL DEFAULT '' COMMENT 'Group ID\uff0c\u7a7a\u5b57\u7b26\u8868\u793a\u6574\u4e2a\u96c6\u7fa4',\n  `quota` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '\u914d\u989d\uff0c0\u8868\u793a\u4f7f\u7528\u9ed8\u8ba4\u503c',\n  `usage` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '\u4f7f\u7528\u91cf',\n  `max_size` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '\u5355\u4e2a\u914d\u7f6e\u5927\u5c0f\u4e0a\u9650\uff0c\u5355\u4f4d\u4e3a\u5b57\u8282\uff0c0\u8868\u793a\u4f7f\u7528\u9ed8\u8ba4\u503c',\n  `max_aggr_count` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '\u805a\u5408\u5b50\u914d\u7f6e\u6700\u5927\u4e2a\u6570\uff0c\uff0c0\u8868\u793a\u4f7f\u7528\u9ed8\u8ba4\u503c',\n  `max_aggr_size` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '\u5355\u4e2a\u805a\u5408\u6570\u636e\u7684\u5b50\u914d\u7f6e\u5927\u5c0f\u4e0a\u9650\uff0c\u5355\u4f4d\u4e3a\u5b57\u8282\uff0c0\u8868\u793a\u4f7f\u7528\u9ed8\u8ba4\u503c',\n  `max_history_count` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '\u6700\u5927\u53d8\u66f4\u5386\u53f2\u6570\u91cf',\n  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '\u521b\u5efa\u65f6\u95f4',\n  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '\u4fee\u6539\u65f6\u95f4',\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `uk_group_id` (`group_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='\u96c6\u7fa4\u3001\u5404Group\u5bb9\u91cf\u4fe1\u606f\u8868';\n\n/******************************************/\n/*   \u8868\u540d\u79f0 = his_config_info              */\n/******************************************/\nCREATE TABLE `his_config_info` (\n  `id` bigint(20) unsigned NOT NULL COMMENT 'id',\n  `nid` bigint(20) unsigned NOT NULL AUTO_INCREMENT COMMENT 'nid, \u81ea\u589e\u6807\u8bc6',\n  `data_id` varchar(255) NOT NULL COMMENT 'data_id',\n  `group_id` varchar(128) NOT NULL COMMENT 'group_id',\n  `app_name` varchar(128) DEFAULT NULL COMMENT 'app_name',\n  `content` longtext NOT NULL COMMENT 'content',\n  `md5` varchar(32) DEFAULT NULL COMMENT 'md5',\n  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '\u521b\u5efa\u65f6\u95f4',\n  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '\u4fee\u6539\u65f6\u95f4',\n  `src_user` text COMMENT 'source user',\n  `src_ip` varchar(50) DEFAULT NULL COMMENT 'source ip',\n  `op_type` char(10) DEFAULT NULL COMMENT 'operation type',\n  `tenant_id` varchar(128) DEFAULT '' COMMENT '\u79df\u6237\u5b57\u6bb5',\n  `encrypted_data_key` text NOT NULL COMMENT '\u5bc6\u94a5',\n  PRIMARY KEY (`nid`),\n  KEY `idx_gmt_create` (`gmt_create`),\n  KEY `idx_gmt_modified` (`gmt_modified`),\n  KEY `idx_did` (`data_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='\u591a\u79df\u6237\u6539\u9020';\n\n\n/******************************************/\n/*   \u8868\u540d\u79f0 = tenant_capacity              */\n/******************************************/\nCREATE TABLE `tenant_capacity` (\n  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT COMMENT '\u4e3b\u952eID',\n  `tenant_id` varchar(128) NOT NULL DEFAULT '' COMMENT 'Tenant ID',\n  `quota` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '\u914d\u989d\uff0c0\u8868\u793a\u4f7f\u7528\u9ed8\u8ba4\u503c',\n  `usage` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '\u4f7f\u7528\u91cf',\n  `max_size` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '\u5355\u4e2a\u914d\u7f6e\u5927\u5c0f\u4e0a\u9650\uff0c\u5355\u4f4d\u4e3a\u5b57\u8282\uff0c0\u8868\u793a\u4f7f\u7528\u9ed8\u8ba4\u503c',\n  `max_aggr_count` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '\u805a\u5408\u5b50\u914d\u7f6e\u6700\u5927\u4e2a\u6570',\n  `max_aggr_size` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '\u5355\u4e2a\u805a\u5408\u6570\u636e\u7684\u5b50\u914d\u7f6e\u5927\u5c0f\u4e0a\u9650\uff0c\u5355\u4f4d\u4e3a\u5b57\u8282\uff0c0\u8868\u793a\u4f7f\u7528\u9ed8\u8ba4\u503c',\n  `max_history_count` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '\u6700\u5927\u53d8\u66f4\u5386\u53f2\u6570\u91cf',\n  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '\u521b\u5efa\u65f6\u95f4',\n  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '\u4fee\u6539\u65f6\u95f4',\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `uk_tenant_id` (`tenant_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='\u79df\u6237\u5bb9\u91cf\u4fe1\u606f\u8868';\n\n\nCREATE TABLE `tenant_info` (\n  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id',\n  `kp` varchar(128) NOT NULL COMMENT 'kp',\n  `tenant_id` varchar(128) default '' COMMENT 'tenant_id',\n  `tenant_name` varchar(128) default '' COMMENT 'tenant_name',\n  `tenant_desc` varchar(256) DEFAULT NULL COMMENT 'tenant_desc',\n  `create_source` varchar(32) DEFAULT NULL COMMENT 'create_source',\n  `gmt_create` bigint(20) NOT NULL COMMENT '\u521b\u5efa\u65f6\u95f4',\n  `gmt_modified` bigint(20) NOT NULL COMMENT '\u4fee\u6539\u65f6\u95f4',\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `uk_tenant_info_kptenantid` (`kp`,`tenant_id`),\n  KEY `idx_tenant_id` (`tenant_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='tenant_info';\n\nCREATE TABLE `users` (\n    `username` varchar(50) NOT NULL PRIMARY KEY COMMENT 'username',\n    `password` varchar(500) NOT NULL COMMENT 'password',\n    `enabled` boolean NOT NULL COMMENT 'enabled'\n);\n\nCREATE TABLE `roles` (\n    `username` varchar(50) NOT NULL COMMENT 'username',\n    `role` varchar(50) NOT NULL COMMENT 'role',\n    UNIQUE INDEX `idx_user_role` (`username` ASC, `role` ASC) USING BTREE\n);\n\nCREATE TABLE `permissions` (\n    `role` varchar(50) NOT NULL COMMENT 'role',\n    `resource` varchar(128) NOT NULL COMMENT 'resource',\n    `action` varchar(8) NOT NULL COMMENT 'action',\n    UNIQUE INDEX `uk_role_permission` (`role`,`resource`,`action`) USING BTREE\n);\n\nINSERT INTO users (username, password, enabled) VALUES ('nacos', '$2a$10$EuWPZHzz32dJN7jexM34MOeYirDdFAZm2kuWj7VEOJhhZkDrxfvUu', TRUE);\n\nINSERT INTO roles (username, role) VALUES ('nacos', 'ROLE_ADMIN');\n</code></pre>"},{"location":"blog/2024/07/15/springcloud/#env","title":"ENV\u73af\u5883","text":"<pre><code>PREFER_HOST_MODE=hostname\nMODE=standalone\nSPRING_DATASOURCE_PLATFORM=mysql\nMYSQL_SERVICE_HOST=192.168.208.128\nMYSQL_SERVICE_DB_NAME=nacos\nMYSQL_SERVICE_PORT=3306\nMYSQL_SERVICE_USER=root \nMYSQL_SERVICE_PASSWORD=mysql_liu\nMYSQL_SERVICE_DB_PARAM=characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=Asia/Shanghai&amp;allowPublicKeyRetrieval=true\n</code></pre>"},{"location":"blog/2024/07/15/springcloud/#seata","title":"seata \u914d\u7f6e","text":""},{"location":"blog/2024/07/15/springcloud/#seata-tc-applicationyamlnacos","title":"seata TC\u542f\u52a8\u7684 application.yaml\u6587\u4ef6[nacos]","text":"<pre><code>server:\n  port: 7091\n\nspring:\n  application:\n    name: seata-server\n\nlogging:\n  config: classpath:logback-spring.xml\n  file:\n    path: ${user.home}/logs/seata\n  extend:\n    logstash-appender:\n      destination: 127.0.0.1:4560\n    kafka-appender:\n      bootstrap-servers: 127.0.0.1:9092\n      topic: logback_to_logstash\n\nconsole:\n  user:\n    username: seata\n    password: seata\n\nseata:\n  config:\n    # support: nacos, consul, apollo, zk, etcd3\n    type: nacos\n    nacos:\n      server-addr: nacos_ip:nacos_port\n      namespace: seata-server\n      group: SEATA_GROUP\n      username: nacos\n      password: nacos\n      data-id: seataServer.properties\n\n  registry:\n    # support: nacos, eureka, redis, zk, consul, etcd3, sofa\n    type: nacos\n    nacos:\n      application: seata-server\n      server-addr: nacos_ip:nacos_port\n      group: SEATA_GROUP\n      namespace: seata-server\n      # tc\u96c6\u7fa4\u540d\u79f0\n      cluster: default\n      username: nacos\n      password: nacos\n#  server:\n#    service-port: 8091 #If not configured, the default is '${server.port} + 1000'\n  security:\n    secretKey: SeataSecretKey0c382ef121d778043159209298fd40bf3850a017\n    tokenValidityInMilliseconds: 1800000\n    ignore:\n      urls: /,/**/*.css,/**/*.js,/**/*.html,/**/*.map,/**/*.svg,/**/*.png,/**/*.ico,/console-fe/public/**,/api/v1/auth/login\n</code></pre>"},{"location":"blog/2024/07/15/springcloud/#nacosseataserverproperties","title":"nacos\u914d\u7f6e\u6587\u4ef6seataServer.properties","text":"<pre><code>store.mode=db\n#-----db-----\nstore.db.datasource=druid\nstore.db.dbType=mysql\n# \u9700\u8981\u6839\u636emysql\u7684\u7248\u672c\u8c03\u6574driverClassName\n# mysql8\u53ca\u4ee5\u4e0a\u7248\u672c\u5bf9\u5e94\u7684driver\uff1acom.mysql.cj.jdbc.Driver\n# mysql8\u4ee5\u4e0b\u7248\u672c\u7684driver\uff1acom.mysql.jdbc.Driver\nstore.db.driverClassName=com.mysql.cj.jdbc.Driver\nstore.db.url=jdbc:mysql://127.0.0.1:3306/seata-server?useUnicode=true&amp;characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useSSL=false\nstore.db.user= \u7528\u6237\u540d\nstore.db.password=\u5bc6\u7801\n# \u6570\u636e\u5e93\u521d\u59cb\u8fde\u63a5\u6570\nstore.db.minConn=1\n# \u6570\u636e\u5e93\u6700\u5927\u8fde\u63a5\u6570\nstore.db.maxConn=20\n# \u83b7\u53d6\u8fde\u63a5\u65f6\u6700\u5927\u7b49\u5f85\u65f6\u95f4 \u9ed8\u8ba45000\uff0c\u5355\u4f4d\u6beb\u79d2\nstore.db.maxWait=5000\n# \u5168\u5c40\u4e8b\u52a1\u8868\u540d \u9ed8\u8ba4global_table\nstore.db.globalTable=global_table\n# \u5206\u652f\u4e8b\u52a1\u8868\u540d \u9ed8\u8ba4branch_table\nstore.db.branchTable=branch_table\n# \u5168\u5c40\u9501\u8868\u540d \u9ed8\u8ba4lock_table\nstore.db.lockTable=lock_table\n# \u67e5\u8be2\u5168\u5c40\u4e8b\u52a1\u4e00\u6b21\u7684\u6700\u5927\u6761\u6570 \u9ed8\u8ba4100\nstore.db.queryLimit=100\n\n\n# undo\u4fdd\u7559\u5929\u6570 \u9ed8\u8ba47\u5929,log_status=1\uff08\u9644\u5f553\uff09\u548c\u672a\u6b63\u5e38\u6e05\u7406\u7684undo\nserver.undo.logSaveDays=7\n# undo\u6e05\u7406\u7ebf\u7a0b\u95f4\u9694\u65f6\u95f4 \u9ed8\u8ba486400000\uff0c\u5355\u4f4d\u6beb\u79d2\nserver.undo.logDeletePeriod=86400000\n# \u4e8c\u9636\u6bb5\u63d0\u4ea4\u91cd\u8bd5\u8d85\u65f6\u65f6\u957f \u5355\u4f4dms,s,m,h,d,\u5bf9\u5e94\u6beb\u79d2,\u79d2,\u5206,\u5c0f\u65f6,\u5929,\u9ed8\u8ba4\u6beb\u79d2\u3002\u9ed8\u8ba4\u503c-1\u8868\u793a\u65e0\u9650\u91cd\u8bd5\n# \u516c\u5f0f: timeout&gt;=now-globalTransactionBeginTime,true\u8868\u793a\u8d85\u65f6\u5219\u4e0d\u518d\u91cd\u8bd5\n# \u6ce8: \u8fbe\u5230\u8d85\u65f6\u65f6\u95f4\u540e\u5c06\u4e0d\u4f1a\u505a\u4efb\u4f55\u91cd\u8bd5,\u6709\u6570\u636e\u4e0d\u4e00\u81f4\u98ce\u9669,\u9664\u975e\u4e1a\u52a1\u81ea\u884c\u53ef\u6821\u51c6\u6570\u636e,\u5426\u8005\u614e\u7528\nserver.maxCommitRetryTimeout=-1\n# \u4e8c\u9636\u6bb5\u56de\u6eda\u91cd\u8bd5\u8d85\u65f6\u65f6\u957f\nserver.maxRollbackRetryTimeout=-1\n# \u4e8c\u9636\u6bb5\u63d0\u4ea4\u672a\u5b8c\u6210\u72b6\u6001\u5168\u5c40\u4e8b\u52a1\u91cd\u8bd5\u63d0\u4ea4\u7ebf\u7a0b\u95f4\u9694\u65f6\u95f4 \u9ed8\u8ba41000\uff0c\u5355\u4f4d\u6beb\u79d2\nserver.recovery.committingRetryPeriod=1000\n# \u4e8c\u9636\u6bb5\u5f02\u6b65\u63d0\u4ea4\u72b6\u6001\u91cd\u8bd5\u63d0\u4ea4\u7ebf\u7a0b\u95f4\u9694\u65f6\u95f4 \u9ed8\u8ba41000\uff0c\u5355\u4f4d\u6beb\u79d2\nserver.recovery.asynCommittingRetryPeriod=1000\n# \u4e8c\u9636\u6bb5\u56de\u6eda\u72b6\u6001\u91cd\u8bd5\u56de\u6eda\u7ebf\u7a0b\u95f4\u9694\u65f6\u95f4  \u9ed8\u8ba41000\uff0c\u5355\u4f4d\u6beb\u79d2\nserver.recovery.rollbackingRetryPeriod=1000\n# \u8d85\u65f6\u72b6\u6001\u68c0\u6d4b\u91cd\u8bd5\u7ebf\u7a0b\u95f4\u9694\u65f6\u95f4 \u9ed8\u8ba41000\uff0c\u5355\u4f4d\u6beb\u79d2\uff0c\u68c0\u6d4b\u51fa\u8d85\u65f6\u5c06\u5168\u5c40\u4e8b\u52a1\u7f6e\u5165\u56de\u6eda\u4f1a\u8bdd\u7ba1\u7406\u5668\nserver.recovery.timeoutRetryPeriod=1000\n</code></pre>"},{"location":"blog/2024/04/16/%E6%95%B0%E7%BB%84%E7%AE%97%E6%B3%95/","title":"\u6570\u7ec4\u7c7b\u578b\u7b97\u6cd5","text":""},{"location":"blog/2024/04/16/%E6%95%B0%E7%BB%84%E7%AE%97%E6%B3%95/#1","title":"1\u3001\u6570\u7ec4\u7406\u8bba\u57fa\u7840","text":"<p>\u6570\u7ec4\u5728\u5185\u5b58\u4e2d\u662f\u4ee5\u8fde\u7eed\u7a7a\u95f4\u50a8\u5b58\u7684\uff0c\u6240\u4ee5\u5177\u6709\u67e5\u8be2\u5feb\u901f\u7684\u4f18\u70b9\uff0c\u4f46\u662f\u6b63\u5f0f\u8fd9\u4e2a\u7279\u70b9\u5bfc\u81f4\u63d2\u5165\u5143\u7d20\u7684\u65f6\u5019\u9700\u8981\u5c06\u63d2\u5165\u7684\u4f4d\u7f6e\u817e\u7a7a\uff0c\u5219\u9700\u8981\u5c06\u63d2\u5165\u4f4d\u7f6e\u4e0e\u4e4b\u540e\u7684\u6240\u6709\u5143\u7d20\u8fdb\u884c\u540e\u79fb\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5bfc\u81f4\u63d2\u5165\uff08\u5220\u9664\uff09\u7684\u64cd\u4f5c\u65f6\u95f4\u590d\u6742\u5ea6\u6bd4\u8f83\u9ad8\u3002</p> <p>**\u4f7f\u7528\u573a\u666f\uff1a**\u5bf9\u63d2\u5165\u64cd\u4f5c\u6bd4\u8f83\u9891\u7e41\u7684\u573a\u666f\u4e0d\u9002\u5408\u4f7f\u7528\uff0c\u7528\u4e8e\u4fdd\u5b58\u6570\u636e\uff0c\u4f8b\u5982java\u4e2d\u7684String\u7c7b\u578b\u5e95\u5c42\u662f\u4e00\u4e2abyte\u6570\u7ec4\uff0cHashMap\u4e2d\u662f\u4e00\u4e2aInt\u7c7b\u578b\u6570\u7ec4\uff08\u4e25\u683c\u6765\u8bf4\uff0c\u6570\u7ec4\u7684\u4f7f\u7528\u5229\u4e8eHashCode\u7684\u5b9a\u4f4d\uff0c\u4f46\u662f\u5982\u679c\u51b2\u7a81\u4e25\u91cd\uff0c\u4f1a\u5bfc\u81f4\u67e5\u8be2\u6548\u7387\u53d8\u4f4e\uff08\u9010\u6e10\u9000\u5316\u4e3a\u94fe\u8868\u6216\u8005\u7ea2\u9ed1\u6811\uff09\uff09\u3002</p> <p>**\u6570\u7ec4\u4e0b\u6807\u7684\u7406\u89e3\uff1a**\u6570\u7ec4\u5728\u8ba1\u7b97\u7684\u7d22\u5f15\u4e0d\u50cf\u81ea\u7136\u7d22\u5f15\uff08\u4ee51\u5f00\u59cb\uff09\uff0c\u800c\u662f\u4ee50\u5f00\u59cb\uff0c\u6240\u4ee5\u5728\u64cd\u4f5c\u6570\u7ec4\u8fb9\u754c\u7b49\u9700\u8981\u8fdb\u4e00\u6b65\u7684\u7406\u89e3\uff0c\u5bf9\u4e8e\u957f\u5ea6\u4e3a10\u7684\u6570\u7ec4\uff0c\u4e3a\u4e86\u904d\u5386\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u4e24\u79cd\u65b9\u5f0f\uff08\u5148\u4e0d\u8003\u8651\u589e\u5f3afor\u5faa\u73af\uff09</p> <pre><code>int[] arrs = new int[]{1,2,3,4,5,6,7,8,9,10};\nfor(int i=0; i&lt;10; i++) {\n    arrs[i]\n}\n\nfor(int i=1; i&lt;=10; i++) {\n    arrs[i-1]\n}\n</code></pre> <p>\u7b2c\u4e00\u79cd\u662f\u5bf9\u8ba1\u7b97\u673a\u53cb\u597d\uff0c\u7b2c\u4e8c\u79cd\u5bf9\u9605\u8bfb\uff08for\u5faa\u73af\u7684\u8fb9\u754c\u6761\u4ef6\uff09\u53cb\u597d\uff0c\u4f8b\u5982\u6211\u9700\u8981\u904d\u5386\u7b2c2\u5230\u7b2c5\u7684\u4f4d\u7f6e\uff0c\u7b2c\u4e00\u79cd\u7684\u505a\u6cd5\u662f</p> <pre><code>for(int i=2-1; i&lt;5; i++) {\n    arrs[i]\n}\n</code></pre> <p>\u662f\u4e0d\u662f\u89c9\u5f97for\u5faa\u73af\u4e2d\u7684\u8fb9\u754c\u6761\u4ef6\u5f88\u5947\u602a\uff0c\u4e0d\u5229\u4e8e\u7406\u89e3\u3002\u5982\u679c\u4f7f\u7528\u7b2c\u4e8c\u79cd</p> <pre><code>for(int i=2; i&lt;=5; i++) {\n    arrs[i-1]\n}\n</code></pre> <p>\u8fd9\u4e2a\u5bf9\u4e0efor\u5faa\u73af\u7684\u8fb9\u754c\u5c31\u53ef\u4ee5\u5f88\u597d\u7684\u7406\u89e3\uff08\u4e60\u60ef\u4e86\u81ea\u7136\u7d22\u5f15\uff09\uff0c\u4f46\u662f\u5bf9\u4e8e\u8ba1\u7b97\u673a\u800c\u8a00\uff0c\u6211\u4eec\u9700\u8981-1\uff0c\u8fd9\u662f\u4e0d\u5229\u4e8e\u7406\u89e3\u7684\u3002</p> <p>\u4f7f\u7528\u54ea\u4e00\u79cd\u5462\uff1f\u6211\u4eec\u5bf9\u6bd4\u4e00\u4e0b</p> <pre><code>n = arrs.length();\n\nfor(int i=0; i&lt;n/2; i++) {\n    arrs[i]\n}\n\nfor(int i=n/2; i&lt;n; i++) {\n    arrs[i]\n}\n\n// \u8fd9\u91ccn/2\u7684\u8ba1\u7b97\u7ed3\u679c\n// \u957f\u5ea6\u4e3a\u5076\u6570\u7684\u65f6\u5019\u4e3a\u540e\u534a\u6bb5\u5143\u7d20\u7684\u7b2c\u4e00\u4e2a \u8ba1\u7b97\u673a\u4e0b\u6807\n// \u957f\u5ea6\u4e3a\u5947\u6570\u7684\u65f6\u5019\u4e3a\u540e\u534a\u6bb5\u5143\u7d20\u7684\u7b2c\u4e00\u4e2a \u8ba1\u7b97\u673a\u4e0b\u6807\uff0c\u6b64\u65f6\u540e\u534a\u6bb5\u6570\u91cf\u591a\u4e00\uff0c\u8fd9\u662f\u7531\u4e8e\u5411\u4e0b\u53d6\u6574 3/2=1\n// \u8fd9\u4e2a\u65f6\u5019\uff0c\u524d\u540e\u534a\u6bb5\u7684\u5206\u754c\u7ebf\u4ea4\u7ed9\u4e86 `&lt;` \u7ef4\u62a4\uff0c\u89c6\u89c9\u4e0a\u770b\u8d77\u6765 n/2 \u8fd9\u4e2a\u503c\u88ab\u4e24\u4e2a\u5faa\u73af\u4f9d\u8d56\u4e86\uff0c\u4f46\u662f\u524d\u540e\u5faa\u73af\u5e94\u8be5\u662f\u72ec\u7acb\u7684\u3002\n\n// \u5982\u679c\u4f7f\u7528\u81ea\u7136\u4e0b\u6807\u904d\u5386\u5219\u53d8\u6210\nfor(int i=1; i&lt;=n/2 -1; i++) {\n    arrs[i-1]\n}\n\nfor(int i=n/2; i&lt;=n; i++) {\n    arrs[i-1]\n}\n\n//\u8fd9\u4e2a\u65f6\u5019\u4e24\u4e2a\u8fb9\u754c n/2 -1 \u548c n/2 \u81ea\u7136\u5206\u5f00\uff0c\u7b26\u5408\u6211\u4eec\u7684\u5e38\u89c4\u601d\u7ef4\uff0c\u4f46\u662f\u5bf9\u4e8e\u6570\u7ec4\u7684\u8bfb\u53d6\u9700\u8981\u51cf\u53bb1\uff0c\u7ef4\u62a4\u7684\u5fc3\u667a\u538b\u529b\u589e\u5927\uff0c\u6240\u4ee5\u9009\u62e9\u54ea\u4e2a\u5e94\u8be5\u770b\u573a\u666f\uff0c\u5bf9\u6570\u7ec4\u7684\u64cd\u4f5c\u591a\u8fd8\u662f\u5bf9for\u5faa\u73af\u7684\u903b\u8f91\u5212\u5206\u591a\n</code></pre>"},{"location":"blog/2024/04/16/%E6%95%B0%E7%BB%84%E7%AE%97%E6%B3%95/#2","title":"2\u3001\u4e8c\u5206\u67e5\u627e","text":"<pre><code>public static int binarySearch(int[] arrs, int target) {\n    int pre = -1;\n    int tail = arrs.length;\n    int mid = 0;\n\n    while(true) {\n        mid = (tail + pre) /2;\n\n        if(mid == pre || mid ==tail) return -1;\n\n        if(arrs[mid] == target) return mid;\n\n        if(arrs[mid] &lt; target) {\n            pre = mid;\n        }\n        if(arrs[mid] &gt; target) {\n            tail = mid;\n        }\n\n    }\n\n}\n</code></pre>"},{"location":"blog/2024/08/08/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E7%99%BB%E5%BD%95%E7%BD%91%E7%AB%99/","title":"\u5fae\u4fe1\u516c\u4f17\u53f7\u767b\u5f55\u7f51\u7ad9","text":""},{"location":"blog/2024/08/08/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E7%99%BB%E5%BD%95%E7%BD%91%E7%AB%99/#_1","title":"\u5fae\u4fe1\u516c\u4f17\u53f7\u767b\u5f55\u7f51\u7ad9","text":"<p>\u9700\u6c42\uff1a\u5fae\u4fe1\u516c\u4f17\u53f7\u767b\u5f55\u7f51\u7ad9\uff0c\u83b7\u53d6\u7528\u6237\u4fe1\u606f</p>"},{"location":"blog/2024/08/08/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E7%99%BB%E5%BD%95%E7%BD%91%E7%AB%99/#_2","title":"\u524d\u63d0\u6761\u4ef6","text":"<ol> <li>\u5fae\u4fe1\u516c\u4f17\u53f7\u5df2\u7ecf\u8ba4\u8bc1</li> <li>\u62e5\u6709\u670d\u52a1\u5668\uff0c\u53ef\u4ee5\u63a5\u6536\u5fae\u4fe1\u670d\u52a1\u5668\u7684\u56de\u8c03</li> </ol>"},{"location":"blog/2024/08/08/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E7%99%BB%E5%BD%95%E7%BD%91%E7%AB%99/#_3","title":"\u6b65\u9aa4","text":""},{"location":"blog/2024/08/08/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E7%99%BB%E5%BD%95%E7%BD%91%E7%AB%99/#1appidappsecret","title":"1\u3001\u83b7\u53d6\u5fae\u4fe1\u516c\u4f17\u53f7\u7684appid\u548cappsecret","text":""},{"location":"blog/2024/08/08/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E7%99%BB%E5%BD%95%E7%BD%91%E7%AB%99/#2cpolar","title":"2\u3001\u63a5\u5165\u670d\u52a1\u5668\uff0c\u63a5\u6536\u5fae\u4fe1\u670d\u52a1\u5668\u7684\u56de\u8c03\uff0c\u9700\u8981\u6709\u57df\u540d\uff0c\u53ef\u4ee5\u4f7f\u7528\u5185\u7f51\u7a7f\u900f\u5de5\u5177\uff0c\u4f8b\u5982cpolar","text":""},{"location":"blog/2024/08/08/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E7%99%BB%E5%BD%95%E7%BD%91%E7%AB%99/#_4","title":"\u9996\u5148\u9700\u8981\u51c6\u5907\u597d\u56fe\u4e2d\u7684\u8d44\u6e90","text":"<p>\u200b           </p> <p>\u8bf4\u660e\uff1a</p> <ul> <li>URL\u8868\u793a\u5fae\u4fe1\u9a8c\u8bc1\u670d\u52a1\u7aef\u662f\u5426\u5b58\u5728\uff0c\u9700\u8981\u6309\u7167\u8981\u6c42\u8fdb\u884c\u914d\u7f6e\uff0c\u4f8b\u5982\u6211\u8fd9\u91cc\u7684\u5730\u5740\u662f</li> </ul> <pre><code>https://13a34511.r1.cpolar.top/api/user/wxcheck\n</code></pre> <p>\u6240\u4ee5\u5fc5\u987b\u5728\u81ea\u5df1\u7684\u670d\u52a1\u4e0a\u51c6\u5907\u597d\u54cd\u5e94\u7684\u63a5\u53e3</p> <pre><code>//\u5916\u5c42\u8fd8\u6709/user\n@GetMapping(\"wxcheck\")\npublic String  wxCheck(@RequestParam(\"signature\") String signature,\n                                    @RequestParam(\"timestamp\") String timestamp,\n                                    @RequestParam(\"nonce\") String nonce,\n                                    @RequestParam(\"echostr\") String echostr) {\n    if (userService.wxCheck(signature, timestamp, nonce, wxOpenConfig.getToken())) {\n        return echostr;\n    } else {\n        return \"error\";\n    }\n}\n</code></pre> <p>\u9700\u8981\u6309\u7167\u5fae\u4fe1\u7684\u8981\u6c42\u8fd4\u56de\u6570\u636e\uff0c\u8981\u6c42\u5982\u4e0b\uff1a</p> <p>1\uff09\u5c06token\u3001timestamp\u3001nonce\u4e09\u4e2a\u53c2\u6570\u8fdb\u884c\u5b57\u5178\u5e8f\u6392\u5e8f</p> <p>2\uff09\u5c06\u4e09\u4e2a\u53c2\u6570\u5b57\u7b26\u4e32\u62fc\u63a5\u6210\u4e00\u4e2a\u5b57\u7b26\u4e32\u8fdb\u884csha1\u52a0\u5bc6</p> <p>3\uff09\u5f00\u53d1\u8005\u83b7\u5f97\u52a0\u5bc6\u540e\u7684\u5b57\u7b26\u4e32\u53ef\u4e0esignature\u5bf9\u6bd4\uff0c\u6807\u8bc6\u8be5\u8bf7\u6c42\u6765\u6e90\u4e8e\u5fae\u4fe1</p> <pre><code>    @Override\n    public Boolean wxCheck(String signature, String timestamp, String nonce, String token) {\n        // \u5fae\u4fe1\u516c\u4f17\u53f7\u63a5\u5165\u6821\u9a8c\n        // \u5c06token\u3001timestamp\u3001nonce\u4e09\u4e2a\u53c2\u6570\u8fdb\u884c\u5b57\u5178\u5e8f\u6392\u5e8f\n        String[] arr = new String[]{token, timestamp, nonce};\n        Arrays.sort(arr);\n        // \u5c06\u4e09\u4e2a\u53c2\u6570\u5b57\u7b26\u4e32\u62fc\u63a5\u6210\u4e00\u4e2a\u5b57\u7b26\u4e32\u8fdb\u884csha1\u52a0\u5bc6\n        StringBuilder content = new StringBuilder();\n        for (String s : arr) {\n            content.append(s);\n        }\n        String tmpStr = MYDigestUtils.sha1DigestAsHex(content.toString());\n\n        log.info(\"\u5fae\u4fe1\u516c\u4f17\u53f7\u63a5\u5165\u6821\u9a8c\uff0csignature = {}, tmpStr = {}\", signature, tmpStr);\n        return signature.equals(tmpStr);\n    }\n</code></pre> <p>\u63a5\u7740\u63d0\u4ea4\u4e0a\u9762\u7684\u8868\u5355\u540e\u4f1a\u63d0\u793a\u9a8c\u8bc1\u901a\u8fc7</p>"},{"location":"blog/2024/08/08/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E7%99%BB%E5%BD%95%E7%BD%91%E7%AB%99/#3access_token","title":"3\u3001\u63a5\u4e0b\u6765\u5c31\u662f\u83b7\u53d6access_token\u4e86","text":"<ul> <li>\u9700\u8981\u6839\u636e\u8981\u6c42\u8fd4\u56de\u8bbf\u95ee\u5fae\u4fe1\u8d44\u6e90\u7684token\uff0c\u8bbf\u95ee\u5fae\u4fe1\u4e2d\u7684\u8d44\u6e90\u5fc5\u987b\u8981\u8fd9\u4e2atoken\uff0c\u4f8b\u5982\u540e\u7eed\u7684\u4e8c\u7ef4\u7801</li> <li>\u5b98\u65b9\u6587\u6863\u5f00\u59cb\u5f00\u53d1 / \u83b7\u53d6 Access token (qq.com)</li> <li>\u4ee3\u7801\uff1a</li> </ul> <pre><code>@Override\npublic String getAccessToken() {\n    // \u83b7\u53d6access_token\n    String url = String.format(\"https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=%s&amp;secret=%s\",\n                               wxOpenConfig.getAppId(), wxOpenConfig.getAppSecret());\n    // \u53d1\u9001\u8bf7\u6c42\n    String result = restTemplate.getForObject(url, String.class);\n    log.info(\"\u83b7\u53d6access_token\uff0cresult = {}\", result);\n    return result;\n}\n</code></pre>"},{"location":"blog/2024/08/08/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E7%99%BB%E5%BD%95%E7%BD%91%E7%AB%99/#4-ticket","title":"4\u3001\u751f\u6210\u5e26 Ticket \u4e8c\u7ef4\u7801","text":"<pre><code>    @Override\n    public String getQRCode(String accessToken) {\n        // \u83b7\u53d6\u4e8c\u7ef4\u7801\n        String url = String.format(\"https://api.weixin.qq.com/cgi-bin/qrcode/create?access_token=%s\", accessToken);\n        // 5\u5206\u949f\u8fc7\u671f\n        String body = WXUtils.getQRCodeBody(\"300\", \"QR_STR_SCENE\");\n        String result = restTemplate.postForObject(url, body, String.class);\n        log.info(\"\u83b7\u53d6\u4e8c\u7ef4\u7801\uff0cresult = {}\", result);\n        return result;\n    }\n</code></pre>"},{"location":"blog/2024/08/08/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E7%99%BB%E5%BD%95%E7%BD%91%E7%AB%99/#5ticket","title":"5\u3001\u5c06\u4e8c\u7ef4\u7801\u7684ticket\u8fd4\u56de\u7ed9\u524d\u7aef\uff0c\u524d\u7aef\u8bf7\u6c42\u5230\u4e8c\u7ef4\u7801\u56fe\u7247\u5c55\u793a\u7ed9\u7528\u6237","text":""},{"location":"blog/2024/08/08/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E7%99%BB%E5%BD%95%E7%BD%91%E7%AB%99/#6urlgetpost","title":"6\u3001\u7528\u6237\u626b\u7801\u540e\u4f1a\u5c06\u54cd\u5e94\u7684\u4e8b\u4ef6\u63a8\u9001\u7ed9\u4e0a\u9762\u7684URL,\u53ea\u662f\u5c06GET\u8bf7\u6c42\u8f6c\u6362\u4f4dPOST\u8bf7\u6c42\uff0c\u683c\u5f0f\u4e3a\uff1a","text":"<pre><code>&lt;xml&gt;\n  &lt;ToUserName&gt;&lt;![CDATA[toUser]]&gt;&lt;/ToUserName&gt;\n  &lt;FromUserName&gt;&lt;![CDATA[FromUser]]&gt;&lt;/FromUserName&gt;\n  &lt;CreateTime&gt;123456789&lt;/CreateTime&gt;\n  &lt;MsgType&gt;&lt;![CDATA[event]]&gt;&lt;/MsgType&gt;\n  &lt;Event&gt;&lt;![CDATA[subscribe]]&gt;&lt;/Event&gt;\n  &lt;EventKey&gt;&lt;![CDATA[qrscene_123123]]&gt;&lt;/EventKey&gt;\n  &lt;Ticket&gt;&lt;![CDATA[TICKET]]&gt;&lt;/Ticket&gt;\n&lt;/xml&gt;\n</code></pre> <p>\u5f53\u7136\u6709\u5f88\u591a\u4e8b\u4ef6\u7c7b\u578b\uff0c\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u7b56\u7565\u6a21\u5f0f\u5206\u522b\u5904\u7406</p> <pre><code>@Slf4j\npublic class DispatchEventHandle {\n\n    private final Map&lt;String, EventHandle&gt; eventHandleMap = new HashMap&lt;&gt;();\n\n    {\n        eventHandleMap.put(\"subscribe\", new SubscribeEventHandle());\n        eventHandleMap.put(\"SCAN\", new ScanEventHandle());\n    }\n\n    public  void dispatch(JSONObject jsonObject) {\n        String eventType = jsonObject.getJSONObject(\"xml\").getStr(WxEventHandleConstants.EVENT_TYPE_KEY);\n        log.info(\"\u4e8b\u4ef6\u7c7b\u578b:{}\", eventType);\n        EventHandle eventHandle = eventHandleMap.get(eventType);\n        if (eventHandle == null) {\n            log.error(\"\u672a\u627e\u5230\u5bf9\u5e94\u7684\u4e8b\u4ef6\u5904\u7406\u5668\");\n            return;\n        }\n        eventHandle.handle(jsonObject);\n\n    }\n}\n</code></pre> <p>\u63a5\u6536\u8bf7\u6c42\u7684\u63a5\u53e3\u5b9a\u4e49\u4e3a</p> <pre><code>    @PostMapping(\"wxcheck\")\n    public String  event(@RequestBody String xml) {\n        String msgType = WXUtils.getMsgType(xml);\n        if (\"event\".equals(msgType)) {\n            DispatchEventHandle dispatchEventHandle = new DispatchEventHandle();\n            dispatchEventHandle.dispatch(JSONUtil.xmlToJson(xml));\n        }\n        return xml;\n    }\n</code></pre>"},{"location":"blog/2024/08/08/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E7%99%BB%E5%BD%95%E7%BD%91%E7%AB%99/#7ticketkeyjwt","title":"7\u3001\u524d\u7aef\u5728\u5c55\u793a\u4e8c\u7ef4\u7801\u540e\u8bb0\u5f97\u8981\u8f6e\u8be2\u670d\u52a1\u7aef\uff0c\u770b\u662f\u5426\u5df2\u7ecf\u626b\u63cf\uff0c\u540e\u7aef\u53ef\u4ee5\u5728\u5904\u7406\u5b8c\u6210\u540e\u5c06ticket\u4f5c\u4e3akey\uff0cJWT\u4f5c\u4e3a\u503c\u7f13\u5b58\uff0c\u524d\u7aef\u8bf7\u6c42\u67e5\u8be2\u5230\u540e\u987a\u5229\u767b\u5f55\uff1b","text":""},{"location":"blog/2024/07/07/springcloud-sentinel/","title":"springcloud sentinel","text":""},{"location":"blog/2024/07/07/springcloud-sentinel/#1","title":"1.\u6e90\u7801\u89e3\u8bfb\u5206\u4e3a\u4e09\u90e8\u5206\uff0c\u521d\u59cb\u5316\u548c\u8fd0\u884c\u8fc7\u7a0b\u4ee5\u53ca\u6269\u5c55\u70b9","text":""},{"location":"blog/2024/07/07/springcloud-sentinel/#11-sentinel","title":"1.1 sentinel\u81ea\u8eab\u521d\u59cb\u5316","text":"<p>\u521d\u59cb\u5316\u4e3asentinel\u5728springboot\u542f\u52a8\u65f6\u5019\uff0c\u505a\u4e86\u4ec0\u4e48\uff1f \u5728\u5f15\u5165\u4f9d\u8d56\u540e\uff0c\u5bf9spring boot\u4ea7\u751f\u4e86\u4ec0\u4e48\u526f\u4f5c\u7528</p> <p><pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-cloud-starter-alibaba-sentinel&lt;/artifactId&gt;\n    &lt;version&gt;2023.0.1.0&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> \u6211\u4eec\u770b\u770b\u4f9d\u8d56\u4e2d\u5305\u542b\u4ec0\u4e48\uff1f</p> <p></p> <p>\u6709\u5f88\u591a\uff0c\u53ef\u4ee5\u770b\u5230\u7ecf\u5178\u7684\u51e0\u4e2a\u90e8\u5206\uff0c\u6211\u4eec\u5148\u770b\u770b\u672c\u4f53spring-cloud-starter-alibaba-sentinel\u4e2d\u7684\u5185\u5bb9\uff0c\u4e00\u822c\u770b\u4e09\u4e2a\u90e8\u5206\uff0c\u4e00\u662f\u81ea\u52a8\u914d\u7f6e\u7c7b\uff0c\u4e8c\u662fSPI\u63a5\u53e3\uff0c\u518d\u662fspringboot\u4e2d\u7684\u6269\u5c55\u70b9spring.factories</p> <p>\u6211\u4eec\u5148\u770b\u770b\u6709\u4ec0\u4e48</p> <p></p> <p>\u53ef\u4ee5\u770b\u5230\u53ea\u662f\u5bfc\u5165\u4e86\u81ea\u52a8\u914d\u7f6e\u7c7b\uff0c\u770b\u770b\u91cc\u9762\u5bfc\u5165\u4e86\u4ec0\u4e48\u914d\u7f6e\u7c7b</p> <pre><code>com.alibaba.cloud.sentinel.SentinelWebAutoConfiguration\ncom.alibaba.cloud.sentinel.SentinelWebFluxAutoConfiguration\ncom.alibaba.cloud.sentinel.endpoint.SentinelEndpointAutoConfiguration\ncom.alibaba.cloud.sentinel.custom.SentinelAutoConfiguration\ncom.alibaba.cloud.sentinel.feign.SentinelFeignAutoConfiguration\n</code></pre> <p>\u7b2c\u4e00\u7b2c\u4e8c\u4e2a\u662f\u5bf9springweb\u6846\u67b6\u7684\u9002\u914d\uff0c\u7b2c\u4e09\u4e2a\u662fsentinel\u63d0\u4f9b\u5bf9\u5916\u7684\u8bbf\u95ee\u7aef\u53e3\uff0c\u7b2c\u4e09\u4e2a\u662f\u521d\u59cb\u5316\u548c\u5b9a\u5236sentinel\uff0c\u7b2c\u4e94\u4e2a\u662f\u5bf9feign\u7684\u652f\u6301\uff0c\u6211\u4eec\u4e00\u4e2a\u4e00\u4e2a\u770b\uff0c\u9996\u5148\u770bsentinel\u81ea\u8eab\u7684\u521d\u59cb\u5316</p>"},{"location":"blog/2024/07/07/springcloud-sentinel/#12-sentinelresttemplatespringmvc","title":"1.2 sentinel\u81ea\u8eab\u7684\u521d\u59cb\u5316\uff0c\u5c5e\u6027\u521d\u59cb\u5316\uff0c\u6570\u636e\u6e90\u521d\u59cb\u5316\uff0c\u5207\u9762\u521d\u59cb\u5316\uff0crestTemplate\u521d\u59cb\u5316\uff0c\u8fd9\u90e8\u5206\u9002\u914d\u4e86spring\u9879\u76ee\uff0c\u5728\u6ca1\u6709\u4f7f\u7528mvc\u7684\u60c5\u51b5\u4e0b","text":"<pre><code>@Configuration(proxyBeanMethods = false)\n@ConditionalOnProperty(name = \"spring.cloud.sentinel.enabled\", matchIfMissing = true)\n@EnableConfigurationProperties(SentinelProperties.class)\npublic class SentinelAutoConfiguration {\n\n    @Value(\"${project.name:${spring.application.name:}}\")\n    private String projectName;\n\n    @Autowired\n    private SentinelProperties properties;\n    // \u5c5e\u6027\u521d\u59cb\u5316\n    @PostConstruct\n    public void init() {\n        if (StringUtils.isEmpty(System.getProperty(LogBase.LOG_DIR))\n                &amp;&amp; StringUtils.isNotBlank(properties.getLog().getDir())) {\n            // \u65e5\u5fd7\n            System.setProperty(LogBase.LOG_DIR, properties.getLog().getDir());\n        }\n        if (StringUtils.isEmpty(System.getProperty(LogBase.LOG_NAME_USE_PID))\n                &amp;&amp; properties.getLog().isSwitchPid()) {\n            // \u65e5\u5fd7\n            System.setProperty(LogBase.LOG_NAME_USE_PID,\n                    String.valueOf(properties.getLog().isSwitchPid()));\n        }\n        if (StringUtils.isEmpty(System.getProperty(SentinelConfig.APP_NAME_PROP_KEY))\n                &amp;&amp; StringUtils.isNotBlank(projectName)) {\n            // \u8bbe\u7f6e\u5de5\u7a0b\u540d\u6216\u8005spring\u5e94\u7528\u540d\u5b57\uff0c\u4e00\u822c\u662f\u5e94\u7528\u540d${spring.application.name:}\n            System.setProperty(SentinelConfig.APP_NAME_PROP_KEY, projectName);\n        }\n        if (StringUtils.isEmpty(System.getProperty(TransportConfig.SERVER_PORT))\n                &amp;&amp; StringUtils.isNotBlank(properties.getTransport().getPort())) {\n             // sentinel \u5bf9\u5916\u7684\u63a7\u5236\u7aef\u53e3\uff0c\u50cf\u662fdashboard\u5c31\u662f\u540c\u4e2a\u8fd9\u4e2a\u7aef\u53e3\u8fdb\u884c\u8bbf\u95ee\u7684\uff0c\u9ed8\u8ba4\u4e3apublic static final String API_PORT = \"8719\";\n            System.setProperty(TransportConfig.SERVER_PORT,\n                    properties.getTransport().getPort());\n        }\n        if (StringUtils.isEmpty(System.getProperty(TransportConfig.CONSOLE_SERVER))\n                &amp;&amp; StringUtils.isNotBlank(properties.getTransport().getDashboard())) {\n           // dashboard\u7684\u7aef\u53e3\u5730\u5740    \n            System.setProperty(TransportConfig.CONSOLE_SERVER,\n                    properties.getTransport().getDashboard());\n        }\n        if (StringUtils.isEmpty(System.getProperty(TransportConfig.HEARTBEAT_INTERVAL_MS))\n                &amp;&amp; StringUtils\n                        .isNotBlank(properties.getTransport().getHeartbeatIntervalMs())) {\n            // \u5fc3\u8df3\u5305\u7684\u65f6\u95f4\u95f4\u9694\uff0c\u9ed8\u8ba4\u4e3aprivate static final long DEFAULT_INTERVAL = 1000 * 10;\n            System.setProperty(TransportConfig.HEARTBEAT_INTERVAL_MS,\n                    properties.getTransport().getHeartbeatIntervalMs());\n        }\n        if (StringUtils.isEmpty(System.getProperty(TransportConfig.HEARTBEAT_CLIENT_IP))\n                &amp;&amp; StringUtils.isNotBlank(properties.getTransport().getClientIp())) {\n            // \u5fc3\u8df3\u5305\u7684\u5ba2\u6237\u7aefip\uff0c\u9ed8\u8ba4\u4e3a\u672c\u673aip\n            System.setProperty(TransportConfig.HEARTBEAT_CLIENT_IP,\n                    properties.getTransport().getClientIp());\n        }\n        if (StringUtils.isEmpty(System.getProperty(SentinelConfig.CHARSET))\n                &amp;&amp; StringUtils.isNotBlank(properties.getMetric().getCharset())) {\n            System.setProperty(SentinelConfig.CHARSET,\n                    properties.getMetric().getCharset());\n        }\n        if (StringUtils\n                .isEmpty(System.getProperty(SentinelConfig.SINGLE_METRIC_FILE_SIZE))\n                &amp;&amp; StringUtils.isNotBlank(properties.getMetric().getFileSingleSize())) {\n            System.setProperty(SentinelConfig.SINGLE_METRIC_FILE_SIZE,\n                    properties.getMetric().getFileSingleSize());\n        }\n        if (StringUtils\n                .isEmpty(System.getProperty(SentinelConfig.TOTAL_METRIC_FILE_COUNT))\n                &amp;&amp; StringUtils.isNotBlank(properties.getMetric().getFileTotalCount())) {\n            System.setProperty(SentinelConfig.TOTAL_METRIC_FILE_COUNT,\n                    properties.getMetric().getFileTotalCount());\n        }\n        if (StringUtils.isEmpty(System.getProperty(SentinelConfig.COLD_FACTOR))\n                &amp;&amp; StringUtils.isNotBlank(properties.getFlow().getColdFactor())) {\n            System.setProperty(SentinelConfig.COLD_FACTOR,\n                    properties.getFlow().getColdFactor());\n        }\n        if (StringUtils.isNotBlank(properties.getBlockPage())) {\n            setConfig(BLOCK_PAGE_URL_CONF_KEY, properties.getBlockPage());\n        }\n\n        // earlier initialize\n        //\u662f\u5426\u4e00\u5f00\u59cb\u5c31\u521d\u59cb\u5316\uff0c\u9ed8\u8ba4\u4e3afalse\uff0c\u800c\u662f\u7b49\u5230\u7b2c\u4e00\u6b21\u8c03\u7528\u7684\u65f6\u5019\u521d\u59cb\u5316\n        if (properties.isEager()) {\n            InitExecutor.doInit();\n        }\n\n    }\n\n    // \u8fd9\u4e2a\u662f\u652f\u6301SentinelResource\u6ce8\u89e3\u7684\u5207\u9762\u7c7b\u521d\u59cb\u5316\n    @Bean\n    @ConditionalOnMissingBean\n    public SentinelResourceAspect sentinelResourceAspect() {\n        return new SentinelResourceAspect();\n    }\n\n    // \u5bf9SentinelRestTemplate\u7684\u521d\u59cb\u5316\uff0c\u521d\u59cb\u5316\u4e00\u4e2a\u540e\u7f6e\u5904\u7406\u5668\uff0c\u7ed9\u4ed6\u6dfb\u52a0\u62e6\u622a\u5668\n    @Bean\n    @ConditionalOnMissingBean\n    @ConditionalOnClass(name = \"org.springframework.web.client.RestTemplate\")\n    @ConditionalOnProperty(name = \"resttemplate.sentinel.enabled\", havingValue = \"true\",\n            matchIfMissing = true)\n    public static SentinelBeanPostProcessor sentinelBeanPostProcessor(\n            ApplicationContext applicationContext) {\n        return new SentinelBeanPostProcessor(applicationContext);\n    }\n    // \u5916\u7f6e\u5c5e\u6027\u6e90\u7684\u5904\u7406\uff0c\u521d\u59cb\u5316\n    // \u518d\u6240\u6709\u5355\u4f8bbean\u521d\u59cb\u5316\u540e\n        /*\n        public void postRegister(AbstractDataSource dataSource) {\n        switch (this.getRuleType()) {\n            case FLOW -&gt; FlowRuleManager.register2Property(dataSource.getProperty());\n            case DEGRADE -&gt; DegradeRuleManager.register2Property(dataSource.getProperty());\n            case PARAM_FLOW -&gt; ParamFlowRuleManager.register2Property(dataSource.getProperty());\n            case SYSTEM -&gt; SystemRuleManager.register2Property(dataSource.getProperty());\n            case AUTHORITY -&gt; AuthorityRuleManager.register2Property(dataSource.getProperty());\n            case GW_FLOW -&gt; GatewayRuleManager.register2Property(dataSource.getProperty());\n            case GW_API_GROUP -&gt; GatewayApiDefinitionManager.register2Property(dataSource.getProperty());\n        }\n\n    }\n    */\n    @Bean\n    @ConditionalOnMissingBean\n    public SentinelDataSourceHandler sentinelDataSourceHandler(\n            DefaultListableBeanFactory beanFactory, SentinelProperties sentinelProperties,\n            Environment env) {\n        return new SentinelDataSourceHandler(beanFactory, sentinelProperties, env);\n    }\n\n    // \u4e00\u4e9b\u8f6c\u6362\u5668\uff0c\u4f8b\u5982\u5c06\u914d\u7f6e\u5916\u90e8\u5c5e\u6027\u6e90\u7684\u65f6\u5019\u8bbe\u7f6e\u8f6c\u6362\u5668\n    @ConditionalOnClass(ObjectMapper.class)\n    @Configuration(proxyBeanMethods = false)\n    protected static class SentinelConverterConfiguration {\n\n        // json\n        @Configuration(proxyBeanMethods = false)\n        protected static class SentinelJsonConfiguration {\n\n            private ObjectMapper objectMapper = new ObjectMapper();\n\n            public SentinelJsonConfiguration() {\n                objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES,\n                        false);\n            }\n\n            @Bean(\"sentinel-json-flow-converter\")\n            public JsonConverter jsonFlowConverter() {\n                return new JsonConverter(objectMapper, FlowRule.class);\n            }\n\n            @Bean(\"sentinel-json-degrade-converter\")\n            public JsonConverter jsonDegradeConverter() {\n                return new JsonConverter(objectMapper, DegradeRule.class);\n            }\n\n            @Bean(\"sentinel-json-system-converter\")\n            public JsonConverter jsonSystemConverter() {\n                return new JsonConverter(objectMapper, SystemRule.class);\n            }\n\n            @Bean(\"sentinel-json-authority-converter\")\n            public JsonConverter jsonAuthorityConverter() {\n                return new JsonConverter(objectMapper, AuthorityRule.class);\n            }\n\n            @Bean(\"sentinel-json-param-flow-converter\")\n            public JsonConverter jsonParamFlowConverter() {\n                return new JsonConverter(objectMapper, ParamFlowRule.class);\n            }\n\n        }\n        // xml\n        @ConditionalOnClass(XmlMapper.class)\n        @Configuration(proxyBeanMethods = false)\n        protected static class SentinelXmlConfiguration {\n\n            private XmlMapper xmlMapper = new XmlMapper();\n\n            public SentinelXmlConfiguration() {\n                xmlMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES,\n                        false);\n            }\n\n            @Bean(\"sentinel-xml-flow-converter\")\n            public XmlConverter xmlFlowConverter() {\n                return new XmlConverter(xmlMapper, FlowRule.class);\n            }\n\n            @Bean(\"sentinel-xml-degrade-converter\")\n            public XmlConverter xmlDegradeConverter() {\n                return new XmlConverter(xmlMapper, DegradeRule.class);\n            }\n\n            @Bean(\"sentinel-xml-system-converter\")\n            public XmlConverter xmlSystemConverter() {\n                return new XmlConverter(xmlMapper, SystemRule.class);\n            }\n\n            @Bean(\"sentinel-xml-authority-converter\")\n            public XmlConverter xmlAuthorityConverter() {\n                return new XmlConverter(xmlMapper, AuthorityRule.class);\n            }\n\n            @Bean(\"sentinel-xml-param-flow-converter\")\n            public XmlConverter xmlParamFlowConverter() {\n                return new XmlConverter(xmlMapper, ParamFlowRule.class);\n            }\n\n        }\n\n    }\n\n}\n</code></pre>"},{"location":"blog/2024/07/07/springcloud-sentinel/#13-springmvc","title":"1.3 \u5bf9springMVC\u7684\u9002\u914d\u521d\u59cb\u5316","text":"<pre><code>@Configuration(proxyBeanMethods = false)\n@ConditionalOnWebApplication(type = Type.SERVLET)\n@ConditionalOnProperty(name = \"spring.cloud.sentinel.enabled\", matchIfMissing = true)\n@ConditionalOnClass(SentinelWebInterceptor.class)\n@EnableConfigurationProperties(SentinelProperties.class)\npublic class SentinelWebAutoConfiguration implements WebMvcConfigurer {\n\n    private static final Logger log = LoggerFactory\n          .getLogger(SentinelWebAutoConfiguration.class);\n\n    @Autowired\n    private SentinelProperties properties;\n\n    @Autowired\n    private Optional&lt;UrlCleaner&gt; urlCleanerOptional;\n\n    @Autowired\n    private Optional&lt;BlockExceptionHandler&gt; blockExceptionHandlerOptional;\n\n    @Autowired\n    private Optional&lt;RequestOriginParser&gt; requestOriginParserOptional;\n\n    // \u8fd9\u91cc\u521d\u59cb\u5316\u4e86\u4e00\u4e2a\u62e6\u622a\u5668\uff0c\u5168\u5c40\u62e6\u622a\u5668\n    @Bean\n    @ConditionalOnProperty(name = \"spring.cloud.sentinel.filter.enabled\",\n          matchIfMissing = true)\n    public SentinelWebInterceptor sentinelWebInterceptor(\n          SentinelWebMvcConfig sentinelWebMvcConfig) {\n       return new SentinelWebInterceptor(sentinelWebMvcConfig);\n    }\n    // \u4e0a\u9762\u62e6\u622a\u5668\u7684\u4e00\u4e9b\u914d\u7f6e\n    @Bean\n    @ConditionalOnProperty(name = \"spring.cloud.sentinel.filter.enabled\",\n          matchIfMissing = true)\n    public SentinelWebMvcConfig sentinelWebMvcConfig() {\n       SentinelWebMvcConfig sentinelWebMvcConfig = new SentinelWebMvcConfig();\n       // \u662f\u5426\u5c06\u8bf7\u6c42\u65b9\u6cd5\u52a0\u5165resource name\n       sentinelWebMvcConfig.setHttpMethodSpecify(properties.getHttpMethodSpecify());\n       sentinelWebMvcConfig.setWebContextUnify(properties.getWebContextUnify());\n       // \u9650\u6d41\u540e\u7684\u4e00\u4e0b\u5f02\u5e38\u5904\u7406\n       if (blockExceptionHandlerOptional.isPresent()) {\n          blockExceptionHandlerOptional\n                .ifPresent(sentinelWebMvcConfig::setBlockExceptionHandler);\n       }\n       else {\n          if (StringUtils.hasText(properties.getBlockPage())) {\n             sentinelWebMvcConfig.setBlockExceptionHandler(((request, response,\n                   e) -&gt; response.sendRedirect(properties.getBlockPage())));\n          }\n          else {\n              // \u9650\u6d41\u540e\u7684\u4e00\u4e0b\u5f02\u5e38\u5904\u7406\uff0c\u9ed8\u8ba4\u503c\n             sentinelWebMvcConfig\n                   .setBlockExceptionHandler(new DefaultBlockExceptionHandler());\n          }\n       }\n\n       urlCleanerOptional.ifPresent(sentinelWebMvcConfig::setUrlCleaner);\n        // \u6e90\u540d\u5b57\u89e3\u6790\n       requestOriginParserOptional.ifPresent(sentinelWebMvcConfig::setOriginParser);\n       return sentinelWebMvcConfig;\n    }\n    // \u6ce8\u518c\u62e6\u622a\u5668\n    @Bean\n    @ConditionalOnProperty(name = \"spring.cloud.sentinel.filter.enabled\",\n          matchIfMissing = true)\n    public SentinelWebMvcConfigurer sentinelWebMvcConfigurer() {\n       return new SentinelWebMvcConfigurer();\n    }\n\n}\n</code></pre>"},{"location":"blog/2024/07/07/springcloud-sentinel/#2","title":"2 \u8fd0\u884c\u8fc7\u7a0b","text":""},{"location":"blog/2024/07/07/springcloud-sentinel/#21-springmvc","title":"2.1 springMVC\u62e6\u622a\u5668\u8fd0\u884c\u903b\u8f91","text":"<p>\u62e6\u622a\u5668\u4e00\u822c\u6709\u4e24\u4e2a\u65b9\u6cd5\uff0c\u4e00\u4e2a\u662f\u8bf7\u6c42\u524d\u7684\u65b9\u6cd5\uff0c\u4e00\u4e2a\u662f\u8bf7\u6c42\u540e\u7684\u65b9\u6cd5\uff0c\u6211\u4eec\u5148\u770b\u8bf7\u6c42\u524d\u7684\u65b9\u6cd5</p> <pre><code>    @Override\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)\n        throws Exception {\n        try {\n            // \u9996\u5148\u83b7\u53d6\u5230\u8d44\u6e90\u540d\u5b57\n            String resourceName = getResourceName(request);\n\n            if (StringUtil.isEmpty(resourceName)) {\n                return true;\n            }\n            // \u5982\u679crequests\u5c5e\u6027\u4e2d\u6709$$sentinel_spring_web_entry_attr-rc\uff0c\u8ba1\u6570\u540e\u653e\u884c\n            if (increaseReferece(request, this.baseWebMvcConfig.getRequestRefName(), 1) != 1) {\n                return true;\n            }\n\n            // Parse the request origin using registered origin parser.\n            // \u6839\u636eHTTP\u751f\u6210\u6e90\uff0c\u9ed8\u8ba4\u4e3a\u7a7a\uff0c\u5728StatisticSlot\u4f1a\u7528\u5230\n            String origin = parseOrigin(request);\n            // \u83b7\u53d6\u76d1\u63a7\u5bb9\u5668\u7684\u540d\u5b57\uff0c\u8fd9\u91cc\u9ed8\u8ba4\u4e3asentinel_spring_web_context\n            String contextName = getContextName(request);\n\n            // \u5173\u952e\u4ee3\u7801\uff0c\u521d\u59cb\u5316\u8c03\u7528\u4e0a\u4e0b\u6587\n            ContextUtil.enter(contextName, origin);\n            // \u8fdb\u5165\u8d44\u6e90\uff0c\u8fdb\u5165slot\u63d2\u4ef6\u6a21\u5757\uff0c\u521b\u5efa\u4e3a\n\n\n            Entry entry = SphU.entry(resourceName, ResourceTypeConstants.COMMON_WEB, EntryType.IN);\n            request.setAttribute(baseWebMvcConfig.getRequestAttributeName(), entry);\n            return true;\n        } catch (BlockException e) {\n            try {\n                handleBlockException(request, response, e);\n            } finally {\n                ContextUtil.exit();\n            }\n            return false;\n        }\n    }\n</code></pre> <pre><code>//slot\u63d2\u4ef6\u6a21\u5757\u521b\u5efa\u8fc7\u7a0b\npublic static ProcessorSlotChain newSlotChain() {\n        if (slotChainBuilder != null) {\n            return slotChainBuilder.build();\n        }\n\n        // Resolve the slot chain builder SPI.\n        //Sentinel default ProcessorSlots\n        //com.alibaba.csp.sentinel.slots.nodeselector.NodeSelectorSlot\n        //com.alibaba.csp.sentinel.slots.clusterbuilder.ClusterBuilderSlot\n        //com.alibaba.csp.sentinel.slots.logger.LogSlot\n        //com.alibaba.csp.sentinel.slots.statistic.StatisticSlot\n        //com.alibaba.csp.sentinel.slots.block.authority.AuthoritySlot\n        //com.alibaba.csp.sentinel.slots.system.SystemSlot\n        //com.alibaba.csp.sentinel.slots.block.flow.param.ParamFlowSlot\n        //com.alibaba.csp.sentinel.slots.block.flow.FlowSlot\n        //com.alibaba.csp.sentinel.slots.block.degrade.DegradeSlot\n        // \u6240\u6709\u7684\u9ed8\u8ba4slot\uff0c\u6267\u884c\u5faa\u5e8f\u4e5f\u662f\u4e0a\u9762\u7684\u987a\u5e8f\n        slotChainBuilder = SpiLoader.of(SlotChainBuilder.class).loadFirstInstanceOrDefault();\n\n        if (slotChainBuilder == null) {\n            // Should not go through here.\n            RecordLog.warn(\"[SlotChainProvider] Wrong state when resolving slot chain builder, using default\");\n            slotChainBuilder = new DefaultSlotChainBuilder();\n        } else {\n            RecordLog.info(\"[SlotChainProvider] Global slot chain builder resolved: {}\",\n                slotChainBuilder.getClass().getCanonicalName());\n        }\n        return slotChainBuilder.build();\n    }\n</code></pre>"},{"location":"blog/2024/07/07/springcloud-sentinel/#22-chainentrycontext-resourcewrapper-null-count-prioritized-args","title":"2.2 \u8fdb\u5165chain.entry(context, resourceWrapper, null, count, prioritized, args)\u770b\u770b\u5b9e\u9645\u7684\u8fd0\u884c\u8fc7\u7a0b","text":"<p>\u6211\u4eec\u5148\u770b\u770bslot\u63a5\u53e3\uff0c\u65b9\u9762\u7406\u89e3\uff0c</p> <pre><code>public interface ProcessorSlot&lt;T&gt; {\n\n    // \u672cslot\u7684\u8fd0\u884c\u903b\u8f91\n    void entry(Context context, ResourceWrapper resourceWrapper, T param, int count, boolean prioritized,\n               Object... args) throws Throwable;\n    // \u672cslot\u7684\u8fd0\u884c\u5b8c\u6210\u540e\uff0c\u9700\u8981\u5e72\u4ec0\u4e48? \u62bd\u8c61\u7c7b\u7684\u5b9e\u73b0\u662f\u5c06\u53c2\u6570\u5f3a\u8f6c\u540e\u8fdb\u5165\u4e0b\u4e00\u4e2aslot\uff0c\u4ed6\u4eec\u7684\u5173\u7cfb\u7684\u5355\u5411\u94fe\u8868\n    void fireEntry(Context context, ResourceWrapper resourceWrapper, Object obj, int count, boolean prioritized,\n                   Object... args) throws Throwable;\n    // \u540c\u7406\n    void exit(Context context, ResourceWrapper resourceWrapper, int count, Object... args);\n\n    void fireExit(Context context, ResourceWrapper resourceWrapper, int count, Object... args);\n}\n</code></pre> <p>\u770b\u770b\u62bd\u8c61\u7c7b</p> <pre><code>public abstract class AbstractLinkedProcessorSlot&lt;T&gt; implements ProcessorSlot&lt;T&gt; {\n\n    // \u4fdd\u5b58\u4e0b\u4e00\u4e2a\u8be5\u6267\u884c\u7684slot\n    private AbstractLinkedProcessorSlot&lt;?&gt; next = null;\n\n    //\u62bd\u8c61\u7c7b\u7684\u5b9e\u73b0\u662f\u5c06\u53c2\u6570\u5f3a\u8f6c\u540e\u8fdb\u5165\u4e0b\u4e00\u4e2aslot\uff0c\u4ed6\u4eec\u7684\u5173\u7cfb\u7684\u5355\u5411\u5217\u8868\n    @Override\n    public void fireEntry(Context context, ResourceWrapper resourceWrapper, Object obj, int count, boolean prioritized, Object... args)\n        throws Throwable {\n        if (next != null) {\n            next.transformEntry(context, resourceWrapper, obj, count, prioritized, args);\n        }\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    void transformEntry(Context context, ResourceWrapper resourceWrapper, Object o, int count, boolean prioritized, Object... args)\n        throws Throwable {\n        T t = (T)o;\n        entry(context, resourceWrapper, t, count, prioritized, args);\n    }\n\n    @Override\n    public void fireExit(Context context, ResourceWrapper resourceWrapper, int count, Object... args) {\n        if (next != null) {\n            next.exit(context, resourceWrapper, count, args);\n        }\n    }\n\n    public AbstractLinkedProcessorSlot&lt;?&gt; getNext() {\n        return next;\n    }\n\n    public void setNext(AbstractLinkedProcessorSlot&lt;?&gt; next) {\n        this.next = next;\n    }\n\n}\n</code></pre>"},{"location":"blog/2024/07/07/springcloud-sentinel/#okslot","title":"ok,\u73b0\u5728\u6b63\u662f\u8fdb\u5165\u5230\u8c03\u7528slot\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u6309\u7167\u4e0a\u9762\u7684\u5faa\u5e8f\u4e00\u4e2a\u4e00\u4e2a\u770b","text":"<pre><code>// Resolve the slot chain builder SPI.\n//Sentinel default ProcessorSlots\n//com.alibaba.csp.sentinel.slots.nodeselector.NodeSelectorSlot\n//com.alibaba.csp.sentinel.slots.clusterbuilder.ClusterBuilderSlot\n//com.alibaba.csp.sentinel.slots.logger.LogSlot\n//com.alibaba.csp.sentinel.slots.statistic.StatisticSlot\n//com.alibaba.csp.sentinel.slots.block.authority.AuthoritySlot\n//com.alibaba.csp.sentinel.slots.system.SystemSlot\n//com.alibaba.csp.sentinel.slots.block.flow.param.ParamFlowSlot\n//com.alibaba.csp.sentinel.slots.block.flow.FlowSlot\n//com.alibaba.csp.sentinel.slots.block.degrade.DegradeSlot\n// \u6240\u6709\u7684\u9ed8\u8ba4slot\uff0c\u6267\u884c\u5faa\u5e8f\u4e5f\u662f\u4e0a\u9762\u7684\u987a\u5e8f\n</code></pre>"},{"location":"blog/2024/07/07/springcloud-sentinel/#nodeselectorslotnode","title":"NodeSelectorSlot\uff0c\u8d44\u6e90node\u9009\u62e9\u5668","text":"<p>\u6211\u4eec\u5fc5\u987b\u5148\u660e\u786e\u4e00\u70b9\uff0cnode\u662f\u4e0eslotchain\u7ed1\u5b9a\u7684\uff0c\u6bcf\u4e00\u4e2a\u552f\u4e00\u8d44\u6e90\u90fd\u6709\u552f\u4e00\u4e00\u4e2aslotchain\uff0c\u800cslotchain\u91cc\u9762\u4fdd\u5b58\u4e86node(defaultNode)\uff0c\u5e76\u4e14\u4fdd\u5b58\u4e86\u4e0d\u540c\u8c03\u7528\u4e0a\u4e0b\u6587\u7684\u4e0d\u540cnode(defaultNode)\uff0c\u5b98\u7f51\u6709\u89e3\u8bf4</p> <p></p> <p>\u8d44\u6e90\u90fd\u6709\u552f\u4e00\u4e00\u4e2aslotchain\uff1b</p> <pre><code>ProcessorSlot&lt;Object&gt; lookProcessChain(ResourceWrapper resourceWrapper) {\n    ProcessorSlotChain chain = chainMap.get(resourceWrapper);\n    if (chain == null) {\n        synchronized (LOCK) {\n            chain = chainMap.get(resourceWrapper);\n            if (chain == null) {\n                // Entry size limit.\n                if (chainMap.size() &gt;= Constants.MAX_SLOT_CHAIN_SIZE) {\n                    return null;\n                }\n\n                chain = SlotChainProvider.newSlotChain();\n                Map&lt;ResourceWrapper, ProcessorSlotChain&gt; newMap = new HashMap&lt;ResourceWrapper, ProcessorSlotChain&gt;(\n                    chainMap.size() + 1);\n                newMap.putAll(chainMap);\n                newMap.put(resourceWrapper, chain);\n                chainMap = newMap;\n            }\n        }\n    }\n    return chain;\n}\n</code></pre> <p>\u6211\u4eec\u770b\u770bNodeSelectorSlot\u662f\u600e\u4e48\u5b9e\u73b0\u7684</p> <pre><code>DefaultNode node = map.get(context.getName());\n// \u53ef\u4ee5\u770b\u5230\uff0c\u4ee5context.getName()\u8c03\u7528\u4e0a\u4e0b\u6587\u7684\u540d\u5b57\u4e3akey\u53bb\u67e5\u627enode\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e00\u4e2a\u8d44\u6e90\u53ef\u80fd\u6709\u591a\u4e2anode\uff0c\u4f46\u662f\u5176\u5b9e\u53ea\u4f1a\u7edf\u8ba1\u4e00\u6b21\uff0c\u5728\u4e0b\u9762\u7684ClusterBuilderSlot\u8c03\u7528\u53ef\u4ee5\u770b\u5230\nif (node == null) {\n    synchronized (this) {\n        node = map.get(context.getName());\n        if (node == null) {\n            node = new DefaultNode(resourceWrapper, null);\n            HashMap&lt;String, DefaultNode&gt; cacheMap = new HashMap&lt;String, DefaultNode&gt;(map.size());\n            cacheMap.putAll(map);\n            cacheMap.put(context.getName(), node);\n            map = cacheMap;\n            // Build invocation tree\n            // \u8bbe\u7f6e\u8c03\u7528\u94fe\uff0c\u56e0\u4e3a\u53ef\u80fd\u5d4c\u5957\u8fdb\u5165\u4e0d\u540c\u7684\u8d44\u6e90\uff0c\n            // context\u4fdd\u5b58\u7740\u5165\u53e3node\u548c\u8c03\u7528\u94fe\uff08\u53cc\u5411\u94fe\u8868\uff09\uff0c\u8fd9\u91cc\u662f\u628a\u5f53\u524d\u8c03\u7528\u7684node\u6dfb\u52a0\u5230\u4e0a\u4e00\u4e2a\u8282\u70b9\u7684CTNode\u4e2d\u7684child,\u5f53\u7136\u5982\u679c\u662f\u7b2c\u4e00\u6b64\u8fdb\u5165\uff0c\u5c31\u52a0\u5165\u5165\u53e3node\u4e2d\n            ((DefaultNode) context.getLastNode()).addChild(node);\n        }\n\n    }\n}\n// \u8bbe\u7f6e\u5f53\u524d\u8c03\u7528\uff0c\u8bbe\u7f6e\u5230\u5f53\u524d\u8c03\u7528CTNODE\u4e2d\u7684CurNode\uff0c\u52a0\u5165\u4e86\u4e24\u6b21\uff0c\u4e00\u6b21\u662f\u52a0\u5165\u5230\u4e0a\u7ea7\u8c03\u7528\u4e0a\u4e0b\u6587\uff0c\u4e00\u6b21\u662f\u52a0\u5165\u5f53\u524d\ncontext.setCurNode(node);\n</code></pre>"},{"location":"blog/2024/07/07/springcloud-sentinel/#clusterbuilderslotclusternode","title":"ClusterBuilderSlot\uff0c\u8d44\u6e90\u7edf\u8ba1\u8282\u70b9\u7684\u6784\u5efa\uff0c\u4e5f\u5c31\u662fClusterNode","text":"<pre><code>public void entry(Context context, ResourceWrapper resourceWrapper, DefaultNode node, int count,\n                  boolean prioritized, Object... args)\n    throws Throwable {\n    //\u5148\u68c0\u67e5\u5f53\u5f53\u524dslotchain\u6709\u6ca1\u6709\n    if (clusterNode == null) {\n        synchronized (lock) {\n            if (clusterNode == null) {\n                // Create the cluster node.\n                clusterNode = new ClusterNode(resourceWrapper.getName(), resourceWrapper.getResourceType());\n                HashMap&lt;ResourceWrapper, ClusterNode&gt; newMap = new HashMap&lt;&gt;(Math.max(clusterNodeMap.size(), 16));\n                newMap.putAll(clusterNodeMap);\n                newMap.put(node.getId(), clusterNode);\n\n                clusterNodeMap = newMap;\n            }\n        }\n    }\n    //\u53ef\u4ee5\u770b\u5230\uff0c\u6bcf\u4e2aslotchain\u53ea\u4f1a\u751f\u6210\u4e00\u4e2aclusterNode\uff0c\u5171\u4eab\u7ed9\u4e0d\u540ccontextname\u7684node\n    node.setClusterNode(clusterNode);\n\n    /*\n     * if context origin is set, we should get or create a new {@link Node} of\n     * the specific origin.\n     */\n    //\u8bbe\u7f6e\u6e90\uff0c\u9ed8\u8ba4\u6ca1\u6709\uff0c\u6709\u8fc7\u6709\uff0c\u989d\u5916\u5728clusterNode\u7ef4\u62a4\u4e00\u4e2amap\n\n    if (!\"\".equals(context.getOrigin())) {\n        Node originNode = node.getClusterNode().getOrCreateOriginNode(context.getOrigin());\n        context.getCurEntry().setOriginNode(originNode);\n    }\n\n    fireEntry(context, resourceWrapper, node, count, prioritized, args);\n}\n</code></pre> <p>ok\uff0c\u8fd9\u91cc\u903b\u8f91\u5f88\u7b80\u5355\uff0c\u521b\u5efa\u4e00\u4e2aclusterNode\u7edf\u8ba1\u8fdb\u5165\u4fe1\u606f</p>"},{"location":"blog/2024/07/07/springcloud-sentinel/#logslot","title":"\u63a5\u7740\u8fdb\u5165LogSlot","text":"<p>\u8fd9\u91cc\u9762\u903b\u8f91\u4e5f\u6bd4\u8f83\u7b80\u5355\uff0c\u8bb0\u5f55BlockException</p> <pre><code>@Override\npublic void entry(Context context, ResourceWrapper resourceWrapper, DefaultNode obj, int count, boolean prioritized, Object... args)\n    throws Throwable {\n    try {\n        fireEntry(context, resourceWrapper, obj, count, prioritized, args);\n    } catch (BlockException e) {\n        EagleEyeLogUtil.log(resourceWrapper.getName(), e.getClass().getSimpleName(), e.getRuleLimitApp(),\n            context.getOrigin(), e.getRule().getId(), count);\n        throw e;\n    } catch (Throwable e) {\n        RecordLog.warn(\"Unexpected entry exception\", e);\n    }\n\n}\n</code></pre>"},{"location":"blog/2024/07/07/springcloud-sentinel/#ok-statisticslot","title":"ok \uff0c\u5230\u4e86\u6838\u5fc3\u7684StatisticSlot","text":"<p>\u9996\u5148\u5224\u65ad\u662f\u5426\u53ef\u4ee5\u8fdb\u5165\uff0c\u8fd9\u91cc\u5148\u53bb\u6267\u884cAuthoritySlot\u3001SystemSlot\uff0cParamFlowSlot\uff0cFlowSlot\uff0c\u6240\u4ee5\u6211\u4eec\u5148\u53bb\u770b\u770b\u5176\u4ed6\u51e0\u4e2aslot\u7684\u903b\u8f91\uff0c\u5148\u8df3\u8fc7\u8fd9\u4e00\u8282</p> <pre><code>@Override\npublic void entry(Context context, ResourceWrapper resourceWrapper, DefaultNode node, int count,\n                  boolean prioritized, Object... args) throws Throwable {\n    try {\n        // \u9996\u5148\u5224\u65ad\u662f\u5426\u53ef\u4ee5\u8fdb\u5165\uff0c\u8fd9\u91cc\u5148\u53bb\u6267\u884cAuthoritySlot\u3001SystemSlot\uff0cParamFlowSlot\uff0cFlowSlot\n        fireEntry(context, resourceWrapper, node, count, prioritized, args);\n\n        // Request passed, add thread count and pass count.\n        node.increaseThreadNum();\n        node.addPassRequest(count);\n\n        if (context.getCurEntry().getOriginNode() != null) {\n            // Add count for origin node.\n            context.getCurEntry().getOriginNode().increaseThreadNum();\n            context.getCurEntry().getOriginNode().addPassRequest(count);\n        }\n\n        if (resourceWrapper.getEntryType() == EntryType.IN) {\n            // Add count for global inbound entry node for global statistics.\n            Constants.ENTRY_NODE.increaseThreadNum();\n            Constants.ENTRY_NODE.addPassRequest(count);\n        }\n\n        // Handle pass event with registered entry callback handlers.\n        for (ProcessorSlotEntryCallback&lt;DefaultNode&gt; handler : StatisticSlotCallbackRegistry.getEntryCallbacks()) {\n            handler.onPass(context, resourceWrapper, node, count, args);\n        }\n    } catch (PriorityWaitException ex) {\n        node.increaseThreadNum();\n        if (context.getCurEntry().getOriginNode() != null) {\n            // Add count for origin node.\n            context.getCurEntry().getOriginNode().increaseThreadNum();\n        }\n\n        if (resourceWrapper.getEntryType() == EntryType.IN) {\n            // Add count for global inbound entry node for global statistics.\n            Constants.ENTRY_NODE.increaseThreadNum();\n        }\n        // Handle pass event with registered entry callback handlers.\n        for (ProcessorSlotEntryCallback&lt;DefaultNode&gt; handler : StatisticSlotCallbackRegistry.getEntryCallbacks()) {\n            handler.onPass(context, resourceWrapper, node, count, args);\n        }\n    } catch (BlockException e) {\n        // Blocked, set block exception to current entry.\n        context.getCurEntry().setBlockError(e);\n\n        // Add block count.\n        node.increaseBlockQps(count);\n        if (context.getCurEntry().getOriginNode() != null) {\n            context.getCurEntry().getOriginNode().increaseBlockQps(count);\n        }\n\n        if (resourceWrapper.getEntryType() == EntryType.IN) {\n            // Add count for global inbound entry node for global statistics.\n            Constants.ENTRY_NODE.increaseBlockQps(count);\n        }\n\n        // Handle block event with registered entry callback handlers.\n        for (ProcessorSlotEntryCallback&lt;DefaultNode&gt; handler : StatisticSlotCallbackRegistry.getEntryCallbacks()) {\n            handler.onBlocked(e, context, resourceWrapper, node, count, args);\n        }\n\n        throw e;\n    } catch (Throwable e) {\n        // Unexpected internal error, set error to current entry.\n        context.getCurEntry().setError(e);\n\n        throw e;\n    }\n}\n</code></pre>"},{"location":"blog/2024/07/07/springcloud-sentinel/#authorityslot","title":"AuthoritySlot","text":"<pre><code>@Override\npublic void entry(Context context, ResourceWrapper resourceWrapper, DefaultNode node, int count, boolean prioritized, Object... args)\n    throws Throwable {\n    // \u68c0\u67e5\u9274\u6743\u4fe1\u606f\n    checkBlackWhiteAuthority(resourceWrapper, context);\n    fireEntry(context, resourceWrapper, node, count, prioritized, args);\n}\n// \u5c31\u662f\u53bb\u62ff\u5230\u5b9e\u73b0\u8bbe\u7f6e\u597d\u7684\u9274\u6743\u89c4\u5219\u770b\u770b\u662f\u5426\u53ef\u4ee5\u901a\u8fc7\nvoid checkBlackWhiteAuthority(ResourceWrapper resource, Context context) throws AuthorityException {\n    Map&lt;String, Set&lt;AuthorityRule&gt;&gt; authorityRules = AuthorityRuleManager.getAuthorityRules();\n\n    if (authorityRules == null) {\n        return;\n    }\n\n    Set&lt;AuthorityRule&gt; rules = authorityRules.get(resource.getName());\n    if (rules == null) {\n        return;\n    }\n\n    for (AuthorityRule rule : rules) {\n        if (!AuthorityRuleChecker.passCheck(rule, context)) {\n            throw new AuthorityException(context.getOrigin(), rule);\n        }\n    }\n}\n</code></pre>"},{"location":"blog/2024/07/07/springcloud-sentinel/#systemslot","title":"SystemSlot","text":"<pre><code>@Override\npublic void entry(Context context, ResourceWrapper resourceWrapper, DefaultNode node, int count,\n                  boolean prioritized, Object... args) throws Throwable {\n    // \u68c0\u67e5\u7cfb\u7edf\u5065\u5eb7\u72b6\u6001\n    // \u8fd9\u91cc\u5c31\u4e0d\u8fdb\u53bb\u770b\u4e86\uff0c\u5177\u4f53\u5c31\u662f\u6839\u636e\u7cfb\u7edf\u7684\u6307\u6807\u8c03\u6574\u901a\u8fc7\u7684\u8bf7\u6c42\uff0c\u5b98\u7f51\u89e3\u91cahttps://sentinelguard.io/zh-cn/docs/system-adaptive-protection.html\n    SystemRuleManager.checkSystem(resourceWrapper, count);\n    fireEntry(context, resourceWrapper, node, count, prioritized, args);\n}\n</code></pre>"},{"location":"blog/2024/07/07/springcloud-sentinel/#paramflowslot","title":"ParamFlowSlot","text":"<pre><code>@Override\npublic void entry(Context context, ResourceWrapper resourceWrapper, DefaultNode node, int count,\n                  boolean prioritized, Object... args) throws Throwable {\n    // \u67e5\u770b\u662f\u5426\u6709\u89c4\u5219\n    if (!ParamFlowRuleManager.hasRules(resourceWrapper.getName())) {\n        fireEntry(context, resourceWrapper, node, count, prioritized, args);\n        return;\n    }\n    // \u6839\u636e\u53c2\u6570\u7684\u4f4d\u7f6e\uff0c\u9650\u5236\u8bbf\u95eehttps://sentinelguard.io/zh-cn/docs/parameter-flow-control.html\n    checkFlow(resourceWrapper, count, args);\n    fireEntry(context, resourceWrapper, node, count, prioritized, args);\n}\n</code></pre>"},{"location":"blog/2024/07/07/springcloud-sentinel/#flowslot","title":"FlowSlot","text":"<p>\u4e0eParamFlowSlot\u7c7b\u4f3c\uff0c\u6839\u636eFlowRule\u51b3\u5b9a\u662f\u5426\u901a\u8fc7flow-control | Sentinel (sentinelguard.io)</p> <pre><code>@Override\npublic void entry(Context context, ResourceWrapper resourceWrapper, DefaultNode node, int count,\n                  boolean prioritized, Object... args) throws Throwable {\n    checkFlow(resourceWrapper, context, node, count, prioritized);\n\n    fireEntry(context, resourceWrapper, node, count, prioritized, args);\n}\n</code></pre>"},{"location":"blog/2024/07/07/springcloud-sentinel/#degradeslot","title":"DegradeSlot","text":"<ul> <li>\u6162\u8c03\u7528\u6bd4\u4f8b (<code>SLOW_REQUEST_RATIO</code>)\uff1a\u9009\u62e9\u4ee5\u6162\u8c03\u7528\u6bd4\u4f8b\u4f5c\u4e3a\u9608\u503c\uff0c\u9700\u8981\u8bbe\u7f6e\u5141\u8bb8\u7684\u6162\u8c03\u7528 RT\uff08\u5373\u6700\u5927\u7684\u54cd\u5e94\u65f6\u95f4\uff09\uff0c\u8bf7\u6c42\u7684\u54cd\u5e94\u65f6\u95f4\u5927\u4e8e\u8be5\u503c\u5219\u7edf\u8ba1\u4e3a\u6162\u8c03\u7528\u3002\u5f53\u5355\u4f4d\u7edf\u8ba1\u65f6\u957f\uff08<code>statIntervalMs</code>\uff09\u5185\u8bf7\u6c42\u6570\u76ee\u5927\u4e8e\u8bbe\u7f6e\u7684\u6700\u5c0f\u8bf7\u6c42\u6570\u76ee\uff0c\u5e76\u4e14\u6162\u8c03\u7528\u7684\u6bd4\u4f8b\u5927\u4e8e\u9608\u503c\uff0c\u5219\u63a5\u4e0b\u6765\u7684\u7194\u65ad\u65f6\u957f\u5185\u8bf7\u6c42\u4f1a\u81ea\u52a8\u88ab\u7194\u65ad\u3002\u7ecf\u8fc7\u7194\u65ad\u65f6\u957f\u540e\u7194\u65ad\u5668\u4f1a\u8fdb\u5165\u63a2\u6d4b\u6062\u590d\u72b6\u6001\uff08HALF-OPEN \u72b6\u6001\uff09\uff0c\u82e5\u63a5\u4e0b\u6765\u7684\u4e00\u4e2a\u8bf7\u6c42\u54cd\u5e94\u65f6\u95f4\u5c0f\u4e8e\u8bbe\u7f6e\u7684\u6162\u8c03\u7528 RT \u5219\u7ed3\u675f\u7194\u65ad\uff0c\u82e5\u5927\u4e8e\u8bbe\u7f6e\u7684\u6162\u8c03\u7528 RT \u5219\u4f1a\u518d\u6b21\u88ab\u7194\u65ad\u3002</li> <li>\u5f02\u5e38\u6bd4\u4f8b (<code>ERROR_RATIO</code>)\uff1a\u5f53\u5355\u4f4d\u7edf\u8ba1\u65f6\u957f\uff08<code>statIntervalMs</code>\uff09\u5185\u8bf7\u6c42\u6570\u76ee\u5927\u4e8e\u8bbe\u7f6e\u7684\u6700\u5c0f\u8bf7\u6c42\u6570\u76ee\uff0c\u5e76\u4e14\u5f02\u5e38\u7684\u6bd4\u4f8b\u5927\u4e8e\u9608\u503c\uff0c\u5219\u63a5\u4e0b\u6765\u7684\u7194\u65ad\u65f6\u957f\u5185\u8bf7\u6c42\u4f1a\u81ea\u52a8\u88ab\u7194\u65ad\u3002\u7ecf\u8fc7\u7194\u65ad\u65f6\u957f\u540e\u7194\u65ad\u5668\u4f1a\u8fdb\u5165\u63a2\u6d4b\u6062\u590d\u72b6\u6001\uff08HALF-OPEN \u72b6\u6001\uff09\uff0c\u82e5\u63a5\u4e0b\u6765\u7684\u4e00\u4e2a\u8bf7\u6c42\u6210\u529f\u5b8c\u6210\uff08\u6ca1\u6709\u9519\u8bef\uff09\u5219\u7ed3\u675f\u7194\u65ad\uff0c\u5426\u5219\u4f1a\u518d\u6b21\u88ab\u7194\u65ad\u3002\u5f02\u5e38\u6bd4\u7387\u7684\u9608\u503c\u8303\u56f4\u662f <code>[0.0, 1.0]</code>\uff0c\u4ee3\u8868 0% - 100%\u3002</li> <li>\u5f02\u5e38\u6570 (<code>ERROR_COUNT</code>)\uff1a\u5f53\u5355\u4f4d\u7edf\u8ba1\u65f6\u957f\u5185\u7684\u5f02\u5e38\u6570\u76ee\u8d85\u8fc7\u9608\u503c\u4e4b\u540e\u4f1a\u81ea\u52a8\u8fdb\u884c\u7194\u65ad\u3002\u7ecf\u8fc7\u7194\u65ad\u65f6\u957f\u540e\u7194\u65ad\u5668\u4f1a\u8fdb\u5165\u63a2\u6d4b\u6062\u590d\u72b6\u6001\uff08HALF-OPEN \u72b6\u6001\uff09\uff0c\u82e5\u63a5\u4e0b\u6765\u7684\u4e00\u4e2a\u8bf7\u6c42\u6210\u529f\u5b8c\u6210\uff08\u6ca1\u6709\u9519\u8bef\uff09\u5219\u7ed3\u675f\u7194\u65ad\uff0c\u5426\u5219\u4f1a\u518d\u6b21\u88ab\u7194\u65ad\u3002</li> <li>circuit-breaking | Sentinel (sentinelguard.io)</li> </ul> <pre><code>@Override\npublic void entry(Context context, ResourceWrapper resourceWrapper, DefaultNode node, int count,\n                  boolean prioritized, Object... args) throws Throwable {\n    performChecking(context, resourceWrapper);\n\n    fireEntry(context, resourceWrapper, node, count, prioritized, args);\n}\n</code></pre> <p>\u5982\u679c\u524d\u9762\u7684\u90fd\u901a\u8fc7\u4e86\u7136\u540e\u56de\u5230StatisticSlot</p> <pre><code>@Override\npublic void entry(Context context, ResourceWrapper resourceWrapper, DefaultNode node, int count,\n                  boolean prioritized, Object... args) throws Throwable {\n    try {\n        // Do some checking.\n        fireEntry(context, resourceWrapper, node, count, prioritized, args);\n\n        // \u73b0\u5728\u6267\u884c\u5230\u8fd9\u91cc\u4e86\n        // \u589e\u52a0\u7ebf\u7a0b\u6570\uff0c\u91cc\u9762\u4f1a\u6709\u4e24\u79cd\uff0c\u4e00\u79cd\u662f\u77ac\u65f6\u7684\uff0c\u4e00\u79cd\u662f\u96c6\u7fa4\u7684\n        node.increaseThreadNum();\n        // \u589e\u52a0\u8bbf\u95ee\u6b21\u6570\n        node.addPassRequest(count);\n        // \u589e\u52a0\u6e90\u8bbf\u95ee\u6b21\u6570\n        if (context.getCurEntry().getOriginNode() != null) {\n            // Add count for origin node.\n            context.getCurEntry().getOriginNode().increaseThreadNum();\n            context.getCurEntry().getOriginNode().addPassRequest(count);\n        }\n\n        // \u7edf\u8ba1\u5165\u53e3node\u7684\u8bbf\u95ee\u6b21\u6570\u548c\u7ebf\u7a0b\n        if (resourceWrapper.getEntryType() == EntryType.IN) {\n            // Add count for global inbound entry node for global statistics.\n            Constants.ENTRY_NODE.increaseThreadNum();\n            Constants.ENTRY_NODE.addPassRequest(count);\n        }\n\n        // \u901a\u8fc7\u4e86\u9650\u6d41\uff0c\u7684\u56de\u8c03\u51fd\u6570\n        for (ProcessorSlotEntryCallback&lt;DefaultNode&gt; handler : StatisticSlotCallbackRegistry.getEntryCallbacks()) {\n            handler.onPass(context, resourceWrapper, node, count, args);\n        }\n    } catch (PriorityWaitException ex) {\n        // \u8fd9\u91cc\u8868\u793a\u9ed8\u8ba4\u5904\u7406\u65f6\uff0c\u7b49\u5f85\u4e00\u4f1a\u540e\u53ef\u4ee5\u8fdb\u53bb\uff0c\u8fd8\u662f\u653e\u884c\n        node.increaseThreadNum();\n        if (context.getCurEntry().getOriginNode() != null) {\n            // Add count for origin node.\n            context.getCurEntry().getOriginNode().increaseThreadNum();\n        }\n\n        if (resourceWrapper.getEntryType() == EntryType.IN) {\n            // \u4e00\u6837\u7edf\u8ba1\u5165\u53e3node\u7684\u8bbf\u95ee\u6b21\u6570\u548c\u7ebf\u7a0b\n            Constants.ENTRY_NODE.increaseThreadNum();\n        }\n        // \u901a\u8fc7\u4e86\u9650\u6d41\uff0c\u7684\u56de\u8c03\u51fd\u6570\n        for (ProcessorSlotEntryCallback&lt;DefaultNode&gt; handler : StatisticSlotCallbackRegistry.getEntryCallbacks()) {\n            handler.onPass(context, resourceWrapper, node, count, args);\n        }\n    } catch (BlockException e) {\n        // Blocked, set block exception to current entry.\n        context.getCurEntry().setBlockError(e);\n\n        // Add block count.\n        node.increaseBlockQps(count);\n        if (context.getCurEntry().getOriginNode() != null) {\n            context.getCurEntry().getOriginNode().increaseBlockQps(count);\n        }\n\n        if (resourceWrapper.getEntryType() == EntryType.IN) {\n            // Add count for global inbound entry node for global statistics.\n            Constants.ENTRY_NODE.increaseBlockQps(count);\n        }\n\n        // \u6ca1\u6709\u901a\u8fc7\u4e86\u9650\u6d41\uff0c\u7684\u56de\u8c03\u51fd\u6570\n        for (ProcessorSlotEntryCallback&lt;DefaultNode&gt; handler : StatisticSlotCallbackRegistry.getEntryCallbacks()) {\n            handler.onBlocked(e, context, resourceWrapper, node, count, args);\n        }\n\n        throw e;\n    } catch (Throwable e) {\n        // Unexpected internal error, set error to current entry.\n        context.getCurEntry().setError(e);\n\n        throw e;\n    }\n}\n</code></pre>"},{"location":"blog/2024/07/07/springcloud-sentinel/#3","title":"3. \u6269\u5c55\u70b9","text":"<p>sentinel\u6709\u5f88\u591a\u6269\u5c55\u70b9</p>"},{"location":"blog/2024/07/07/springcloud-sentinel/#31-initexector","title":"3.1 \u521d\u59cb\u5316\u8fc7\u7a0b\u6269\u5c55Initexector","text":"<p>\u6267\u884c\u65f6\u673a\uff0c\u7b2c\u4e00\u6b21\u8c03\u7528enty\uff0c\u6216\u8005\u4e0d\u662fEarler\u6a21\u5f0f</p> <pre><code>public static void doInit() {\n    if (!initialized.compareAndSet(false, true)) {\n        return;\n    }\n    try {\n        // \u627e\u5230\u6240\u6709\u7684InitFunc\n        List&lt;InitFunc&gt; initFuncs = SpiLoader.of(InitFunc.class).loadInstanceListSorted();\n        List&lt;OrderWrapper&gt; initList = new ArrayList&lt;OrderWrapper&gt;();\n        for (InitFunc initFunc : initFuncs) {\n            RecordLog.info(\"[InitExecutor] Found init func: {}\", initFunc.getClass().getCanonicalName());\n            insertSorted(initList, initFunc);\n        }\n        for (OrderWrapper w : initList) {\n            w.func.init();\n            RecordLog.info(\"[InitExecutor] Executing {} with order {}\",\n                w.func.getClass().getCanonicalName(), w.order);\n        }\n    } catch (Exception ex) {\n        RecordLog.warn(\"[InitExecutor] WARN: Initialization failed\", ex);\n        ex.printStackTrace();\n    } catch (Error error) {\n        RecordLog.warn(\"[InitExecutor] ERROR: Initialization failed with fatal error\", error);\n        error.printStackTrace();\n    }\n}\n</code></pre> <p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u4f1a\u627e\u5230\u96c6\u7fa4\u6a21\u5f0f\u4e0b\u7684client\u548cserver\u521d\u59cb\u5316\u4ee5\u53cametric\u56de\u8c03\u51fd\u6570\u521d\u59cb\u5316</p> <pre><code>public class MetricCallbackInit implements InitFunc {\n    @Override\n    public void init() throws Exception {\n        StatisticSlotCallbackRegistry.addEntryCallback(MetricEntryCallback.class.getCanonicalName(),\n            new MetricEntryCallback());\n        StatisticSlotCallbackRegistry.addExitCallback(MetricExitCallback.class.getCanonicalName(),\n            new MetricExitCallback());\n    }\n}\n</code></pre>"},{"location":"blog/2024/07/07/springcloud-sentinel/#32-slotslot-chain","title":"3.2 Slot/Slot Chain\u6269\u5c55","text":"<p>\u8c03\u7528\u65f6\u673a\uff1a\u6ca1\u6709\u627e\u5230\u8d44\u6e90\u5339\u914d\u7684slotchain</p> <pre><code>public final class SlotChainProvider {\n\n    private static volatile SlotChainBuilder slotChainBuilder = null;\n\n    /**\n     * The load and pick process is not thread-safe, but it's okay since the method should be only invoked\n     * via {@code lookProcessChain} in {@link com.alibaba.csp.sentinel.CtSph} under lock.\n     *\n     * @return new created slot chain\n     */\n    public static ProcessorSlotChain newSlotChain() {\n        if (slotChainBuilder != null) {\n            return slotChainBuilder.build();\n        }\n\n        // Resolve the slot chain builder SPI.\n        slotChainBuilder = SpiLoader.of(SlotChainBuilder.class).loadFirstInstanceOrDefault();\n\n        if (slotChainBuilder == null) {\n            // Should not go through here.\n            RecordLog.warn(\"[SlotChainProvider] Wrong state when resolving slot chain builder, using default\");\n            slotChainBuilder = new DefaultSlotChainBuilder();\n        } else {\n            RecordLog.info(\"[SlotChainProvider] Global slot chain builder resolved: {}\",\n                slotChainBuilder.getClass().getCanonicalName());\n        }\n        return slotChainBuilder.build();\n    }\n\n    private SlotChainProvider() {}\n}\n</code></pre>"},{"location":"blog/2024/07/07/springcloud-sentinel/#33-transport","title":"3.3 Transport \u6269\u5c55","text":"<p>\u5176\u5b9e\u5c31\u662f\u5ba2\u6237\u7aef\u5bf9\u5916\u66b4\u9732\u7684\u63a5\u53e3\uff0c\u9ed8\u8ba4\u4e5f\u4f1a\u66b4\u9732\u4e00\u4e9b\u63a5\u53e3\uff0c\u65b9\u9762\u67e5\u770b\u5ba2\u6237\u7aef\u7684\u60c5\u51b5</p> <p>\u9996\u5148\u6709\u4e00\u4e2aAPI\u4e2d\u5fc3\u8d1f\u8d23\u63a5\u6536\u5916\u754c\u4fe1\u606f</p> <pre><code>public class SimpleHttpCommandCenter implements CommandCenter {\n\n    private static final int PORT_UNINITIALIZED = -1;\n\n    private static final int DEFAULT_SERVER_SO_TIMEOUT = 3000;\n    private static final int DEFAULT_PORT = 8719;\n\n    @SuppressWarnings(\"rawtypes\")\n    private static final Map&lt;String, CommandHandler&gt; handlerMap = new ConcurrentHashMap&lt;String, CommandHandler&gt;();\n\n    @SuppressWarnings(\"PMD.ThreadPoolCreationRule\")\n    private ExecutorService executor = Executors.newSingleThreadExecutor(\n        new NamedThreadFactory(\"sentinel-command-center-executor\", true));\n    private ExecutorService bizExecutor;\n\n    private ServerSocket socketReference;\n\n    @Override\n    @SuppressWarnings(\"rawtypes\")\n    public void beforeStart() throws Exception {\n        // Register handlers\n        Map&lt;String, CommandHandler&gt; handlers = CommandHandlerProvider.getInstance().namedHandlers();\n        registerCommands(handlers);\n    }\n\n    @Override\n    public void start() throws Exception {\n        int nThreads = Runtime.getRuntime().availableProcessors();\n        this.bizExecutor = new ThreadPoolExecutor(nThreads, nThreads, 0L, TimeUnit.MILLISECONDS,\n            new ArrayBlockingQueue&lt;Runnable&gt;(10),\n            new NamedThreadFactory(\"sentinel-command-center-service-executor\", true),\n            new RejectedExecutionHandler() {\n                @Override\n                public void rejectedExecution(Runnable r, ThreadPoolExecutor executor) {\n                    CommandCenterLog.info(\"EventTask rejected\");\n                    throw new RejectedExecutionException();\n                }\n            });\n\n        Runnable serverInitTask = new Runnable() {\n            int port;\n\n            {\n                try {\n                    port = Integer.parseInt(TransportConfig.getPort());\n                } catch (Exception e) {\n                    port = DEFAULT_PORT;\n                }\n            }\n\n            @Override\n            public void run() {\n                boolean success = false;\n                ServerSocket serverSocket = getServerSocketFromBasePort(port);\n\n                if (serverSocket != null) {\n                    CommandCenterLog.info(\"[CommandCenter] Begin listening at port \" + serverSocket.getLocalPort());\n                    socketReference = serverSocket;\n                    executor.submit(new ServerThread(serverSocket));\n                    success = true;\n                    port = serverSocket.getLocalPort();\n                } else {\n                    CommandCenterLog.info(\"[CommandCenter] chooses port fail, http command center will not work\");\n                }\n\n                if (!success) {\n                    port = PORT_UNINITIALIZED;\n                }\n\n                TransportConfig.setRuntimePort(port);\n                executor.shutdown();\n            }\n\n        };\n\n        new Thread(serverInitTask).start();\n    }\n\n    /**\n     * Get a server socket from an available port from a base port.&lt;br&gt;\n     * Increasing on port number will occur when the port has already been used.\n     *\n     * @param basePort base port to start\n     * @return new socket with available port\n     */\n    private static ServerSocket getServerSocketFromBasePort(int basePort) {\n        int tryCount = 0;\n        while (true) {\n            try {\n                ServerSocket server = new ServerSocket(basePort + tryCount / 3, 100);\n                server.setReuseAddress(true);\n                return server;\n            } catch (IOException e) {\n                tryCount++;\n                try {\n                    TimeUnit.MILLISECONDS.sleep(30);\n                } catch (InterruptedException e1) {\n                    break;\n                }\n            }\n        }\n        return null;\n    }\n\n    @Override\n    public void stop() throws Exception {\n        if (socketReference != null) {\n            try {\n                socketReference.close();\n            } catch (IOException e) {\n                CommandCenterLog.warn(\"Error when releasing the server socket\", e);\n            }\n        }\n\n        if (bizExecutor != null) {\n            bizExecutor.shutdownNow();\n        }\n        executor.shutdownNow();\n        TransportConfig.setRuntimePort(PORT_UNINITIALIZED);\n        handlerMap.clear();\n    }\n\n    /**\n     * Get the name set of all registered commands.\n     */\n    public static Set&lt;String&gt; getCommands() {\n        return handlerMap.keySet();\n    }\n\n    class ServerThread extends Thread {\n\n        private ServerSocket serverSocket;\n\n        ServerThread(ServerSocket s) {\n            this.serverSocket = s;\n            setName(\"sentinel-courier-server-accept-thread\");\n        }\n\n        @Override\n        public void run() {\n            while (true) {\n                Socket socket = null;\n                try {\n                    socket = this.serverSocket.accept();\n                    setSocketSoTimeout(socket);\n                    HttpEventTask eventTask = new HttpEventTask(socket);\n                    bizExecutor.submit(eventTask);\n                } catch (Exception e) {\n                    CommandCenterLog.info(\"Server error\", e);\n                    if (socket != null) {\n                        try {\n                            socket.close();\n                        } catch (Exception e1) {\n                            CommandCenterLog.info(\"Error when closing an opened socket\", e1);\n                        }\n                    }\n                    try {\n                        // In case of infinite log.\n                        Thread.sleep(10);\n                    } catch (InterruptedException e1) {\n                        // Indicates the task should stop.\n                        break;\n                    }\n                }\n            }\n        }\n    }\n\n}\n</code></pre> <p>\u63a5\u6536\u5230\u4e4b\u540e\u627e\u5230\u9002\u914d\u7684handler</p> <pre><code>public void run() {\n    if (socket == null) {\n        return;\n    }\n\n    PrintWriter printWriter = null;\n    InputStream inputStream = null;\n    try {\n        long start = System.currentTimeMillis();\n        inputStream = new BufferedInputStream(socket.getInputStream());\n        OutputStream outputStream = socket.getOutputStream();\n\n        printWriter = new PrintWriter(\n            new OutputStreamWriter(outputStream, Charset.forName(SentinelConfig.charset())));\n\n        String firstLine = readLine(inputStream);\n        CommandCenterLog.info(\"[SimpleHttpCommandCenter] Socket income: \" + firstLine\n            + \", addr: \" + socket.getInetAddress());\n        CommandRequest request = processQueryString(firstLine);\n\n        if (firstLine.length() &gt; 4 &amp;&amp; StringUtil.equalsIgnoreCase(\"POST\", firstLine.substring(0, 4))) {\n            // Deal with post method\n            processPostRequest(inputStream, request);\n        }\n\n        // Validate the target command.\n        String commandName = HttpCommandUtils.getTarget(request);\n        if (StringUtil.isBlank(commandName)) {\n            writeResponse(printWriter, StatusCode.BAD_REQUEST, INVALID_COMMAND_MESSAGE);\n            return;\n        }\n\n        // Find the matching command handler.\n        CommandHandler&lt;?&gt; commandHandler = SimpleHttpCommandCenter.getHandler(commandName);\n        if (commandHandler != null) {\n            CommandResponse&lt;?&gt; response = commandHandler.handle(request);\n            handleResponse(response, printWriter);\n        } else {\n            // No matching command handler.\n            writeResponse(printWriter, StatusCode.BAD_REQUEST, \"Unknown command `\" + commandName + '`');\n        }\n\n        long cost = System.currentTimeMillis() - start;\n        CommandCenterLog.info(\"[SimpleHttpCommandCenter] Deal a socket task: \" + firstLine\n            + \", address: \" + socket.getInetAddress() + \", time cost: \" + cost + \" ms\");\n    } catch (RequestException e) {\n        writeResponse(printWriter, e.getStatusCode(), e.getMessage());\n    } catch (Throwable e) {\n        CommandCenterLog.warn(\"[SimpleHttpCommandCenter] CommandCenter error\", e);\n        try {\n            if (printWriter != null) {\n                String errorMessage = SERVER_ERROR_MESSAGE;\n                e.printStackTrace();\n                if (!writtenHead) {\n                    writeResponse(printWriter, StatusCode.INTERNAL_SERVER_ERROR, errorMessage);\n                } else {\n                    printWriter.println(errorMessage);\n                }\n                printWriter.flush();\n            }\n        } catch (Exception e1) {\n            CommandCenterLog.warn(\"Failed to write error response\", e1);\n        }\n    } finally {\n        closeResource(inputStream);\n        closeResource(printWriter);\n        closeResource(socket);\n    }\n}\n</code></pre> <p>\u9ed8\u8ba4\u4f1a\u5b9a\u4e49\u4e00\u4e9bhandle</p> <pre><code>com.alibaba.csp.sentinel.cluster.server.command.handler.ModifyClusterServerFlowConfigHandler\ncom.alibaba.csp.sentinel.cluster.server.command.handler.FetchClusterFlowRulesCommandHandler\ncom.alibaba.csp.sentinel.cluster.server.command.handler.FetchClusterParamFlowRulesCommandHandler\ncom.alibaba.csp.sentinel.cluster.server.command.handler.FetchClusterServerConfigHandler\ncom.alibaba.csp.sentinel.cluster.server.command.handler.ModifyClusterServerTransportConfigHandler\ncom.alibaba.csp.sentinel.cluster.server.command.handler.ModifyServerNamespaceSetHandler\ncom.alibaba.csp.sentinel.cluster.server.command.handler.ModifyClusterFlowRulesCommandHandler\ncom.alibaba.csp.sentinel.cluster.server.command.handler.ModifyClusterParamFlowRulesCommandHandler\ncom.alibaba.csp.sentinel.cluster.server.command.handler.FetchClusterServerInfoCommandHandler\ncom.alibaba.csp.sentinel.cluster.server.command.handler.FetchClusterMetricCommandHandler\n\ncom.alibaba.csp.sentinel.command.handler.GetParamFlowRulesCommandHandler\ncom.alibaba.csp.sentinel.command.handler.ModifyParamFlowRulesCommandHandler\n\ncom.alibaba.csp.sentinel.command.handler.ModifyClusterClientConfigHandler\ncom.alibaba.csp.sentinel.command.handler.FetchClusterClientConfigHandler\n</code></pre>"},{"location":"blog/2024/07/07/springcloud-sentinel/#34","title":"3.4 \u96c6\u7fa4\u6d41\u63a7\u6269\u5c55","text":"<p>\u96c6\u7fa4\u6d41\u63a7 \u00b7 alibaba/Sentinel Wiki (github.com)</p>"},{"location":"blog/2024/04/16/mybatisplus-%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/","title":"Mybatis[plus] \u6e90\u7801\u9605\u8bfb\u7b14\u8bb0","text":""},{"location":"blog/2024/04/16/mybatisplus-%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/#_1","title":"\u8c03\u7528\u6d41\u7a0b\u6982\u8ff0\uff1a","text":"<p>mybatis\u7684\u524d\u8eab\u662fibatis\uff0c\u539f\u751f\u7684ibatis\u6267\u884ccurd\u64cd\u4f5c\u662f\u56fa\u5b9a\u7684\u64cd\u4f5c\uff0c\u4f7f\u7528SQLSession\u63a5\u53e3\u4e2d\u7684\u65b9\u6cd5\u8fdb\u884c\u589e\u5220\u67e5\u6539\uff0c\u6211\u4eec\u5148\u9605\u8bfbIbatis\u90e8\u5206\u7684\u4ee3\u7801\uff0c\u540e\u7eedmybatis[plus]\u90fd\u662f\u5728\u6b64\u57fa\u7840\u4e0a\u6269\u5c55\u4e86MapperProxy\u4ee5\u53ca\u9884\u8bbesql\u8bed\u53e5\u52a8\u6001sql\u6761\u4ef6\u7b49\u5c01\u88c5\uff0c\u6211\u4eec\u770b\u4e00\u4e0bibatis\u7684Session\u6838\u5fc3\u63a5\u53e3\uff1a</p> <pre><code>public interface SqlSession extends Closeable {\n\n  &lt;E&gt; List&lt;E&gt; selectList(String statement);\n\n  &lt;K, V&gt; Map&lt;K, V&gt; selectMap(String statement, Object parameter, String mapKey);\n\n  &lt;T&gt; Cursor&lt;T&gt; selectCursor(String statement);\n\n  int insert(String statement);\n\n  int update(String statement);\n\n  int delete(String statement);\n\n}\n</code></pre> <p>\u8fd9\u4e2a\u63a5\u53e3\u91cc\u9762\u6700\u7ec8\u8981\u7684\u56db\u7c7b\u65b9\u6cd5\u4e3a\uff08selectList\u3001selectMap\u3001selectCursor\uff09\u3001insert\u3001delete\u3001update\u3002</p> <p>\u4f46\u5176\u5b9e\u6700\u7ec8\u6267\u884csql\u8bed\u53e5\u7684\u4e3aExecutor\u4e2d\u7684\u65b9\u6cd5</p> <pre><code>public interface Executor {\n\n  int update(MappedStatement ms, Object parameter) throws SQLException;\n\n  &lt;E&gt; List&lt;E&gt; query(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler,\n      CacheKey cacheKey, BoundSql boundSql) throws SQLException;\n\n  &lt;E&gt; List&lt;E&gt; query(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler)\n      throws SQLException;\n\n  &lt;E&gt; Cursor&lt;E&gt; queryCursor(MappedStatement ms, Object parameter, RowBounds rowBounds) throws SQLException;\n}\n</code></pre> <p>\u5176\u4e2d\u5206\u4e3aquery\u548cupdate\u65b9\u6cd5\uff0c\u6700\u540e\u7531\u5b9e\u9645\u5b50\u7c7b\u7684doQuery\u3001doUpdate\u6267\u884c\u771f\u6b63\u7684sql\u8bed\u53e5\uff0c\u5176\u4e2d\u8fdb\u4e00\u6b65\u4ea4\u7ed9\u4e86StatementHandler\u5bf9\u8c61\u5904\u7406</p> <pre><code>public interface StatementHandler {\n\n  Statement prepare(Connection connection, Integer transactionTimeout) throws SQLException;\n\n  void parameterize(Statement statement) throws SQLException;\n\n  void batch(Statement statement) throws SQLException;\n\n  int update(Statement statement) throws SQLException;\n\n  &lt;E&gt; List&lt;E&gt; query(Statement statement, ResultHandler resultHandler) throws SQLException;\n\n  &lt;E&gt; Cursor&lt;E&gt; queryCursor(Statement statement) throws SQLException;\n\n  BoundSql getBoundSql();\n\n  ParameterHandler getParameterHandler();\n\n}\n</code></pre> <p>\u53ef\u4ee5\u770b\u5230\u91cc\u9762\u6700\u7ec8\u5230\u8fbeupdate\u6216\u8005query\u65b9\u6cd5</p> <p></p> <p>\u6240\u4ee5\u8c03\u7528\u903b\u8f91\u4e3aSqlSession-&gt;Executor-&gt;StatementHandler\uff0c\u6bcf\u4e2aSqlSession\u6709\u4e00\u4e2aExecutor\uff0c\u6bcf\u4e2aExecutor\u6709\u4e00\u4e2aStatementHandler\uff08configuration\u4e2d\u83b7\u5f97\u7684\uff0c\u7ecf\u8fc7\u63d2\u4ef6\u7684\u5305\u88c5\uff0c\u540e\u9762\u4f1a\u8bf4\uff09\uff1b</p> <p>SqlSession\u7684\u521b\u5efa\u8fc7\u7a0b\uff1a</p> <p></p> <p>\u5176\u4e2d\u7684\u6838\u5fc3\u4e3aConfiguration\uff0c\u6574\u4e2aibatis\u90fd\u56f4\u7ed5\u8fd9\u8fd9\u4e2aConfiguration\u7c7b\uff0c\u975e\u5e38\u91cd\u8981\u8d1f\u8d23Executor\u3001ParameterHandler\u3001ResultSetHandler\u7684\u521b\u5efa\uff0cMapperStatements\u7684\u4fdd\u5b58</p>"},{"location":"blog/2024/04/16/mybatisplus-%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/#_2","title":"\u4e00\u3001\u4e8c\u7ea7\u7f13\u5b58","text":"<p>\u4e00\u7ea7\u7f13\u5b58</p> <p>\u5b58\u5728\u4e0e\u6267\u884c\u5668\u4e2d\uff0c\u6bcf\u6b21\u521b\u5efa\u90fd\u4f1a\u643a\u5e26\uff0c\u6240\u4ee5\u6bcf\u6b21\u4f1a\u8bdd\u90fd\u4f1a\u6709\u4e00\u7ea7\u7f13\u5b58\u7684\u5b58\u5728\uff1aBaseExecutor.java</p> <pre><code>  public &lt;E&gt; List&lt;E&gt; query(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql) throws SQLException {\n    ErrorContext.instance().resource(ms.getResource()).activity(\"executing a query\").object(ms.getId());\n    if (closed) {\n      throw new ExecutorException(\"Executor was closed.\");\n    }\n    if (queryStack == 0 &amp;&amp; ms.isFlushCacheRequired()) {\n      clearLocalCache();\n    }\n    List&lt;E&gt; list;\n    try {\n      queryStack++;\n      list = resultHandler == null ? (List&lt;E&gt;) localCache.getObject(key) : null;\n      if (list != null) {\n        handleLocallyCachedOutputParameters(ms, key, parameter, boundSql);\n      } else {\n        list = queryFromDatabase(ms, parameter, rowBounds, resultHandler, key, boundSql);\n      }\n    } finally {\n      queryStack--;\n    }\n    if (queryStack == 0) {\n      for (DeferredLoad deferredLoad : deferredLoads) {\n        deferredLoad.load();\n      }\n      // issue #601\n      deferredLoads.clear();\n      if (configuration.getLocalCacheScope() == LocalCacheScope.STATEMENT) {\n        // issue #482\n        clearLocalCache();\n      }\n    }\n    return list;\n  }\n</code></pre> <p>\u5728\u67e5\u8be2\u4e4b\u524d\uff0c\u4f1a\u5148\u53bb\u7f13\u5b58\u91cc\u9762\u67e5\u627e\uff0c\u5176\u4e2dkey\u503c\u4e0e\u56db\u4e2a\u65b9\u9762\u6709\u5173</p> <pre><code>CacheKey key = createCacheKey(ms, parameter, rowBounds, boundSql);\n</code></pre> <p>\u53ea\u6709\u5f53sql\u8bed\u53e5\u3001\u53c2\u6570\u3001\u5206\u9875\u3001\u4e0e\u7ed1\u5b9a\u53c2\u6570\u7684sql\u4e00\u6837\u624d\u4f1a\u5339\u914d\uff1b</p> <p>\u4e8c\u7ea7\u7f13\u5b58</p> <p>\u5b58\u5728\u4e0ems\u4e2d\u7684cache\u5c5e\u6027\u5f53\u4e2d\uff0c\u53ea\u6709\u5f53configuration\u4e2d\u7684cacheEnable\u4e3atrue\u624d\u4f1a\u521b\u5efacacheExecutor</p> <pre><code>// Configuration.java\n  public Executor newExecutor(Transaction transaction, ExecutorType executorType) {\n    executorType = executorType == null ? defaultExecutorType : executorType;\n    Executor executor;\n    if (ExecutorType.BATCH == executorType) {\n      executor = new BatchExecutor(this, transaction);\n    } else if (ExecutorType.REUSE == executorType) {\n      executor = new ReuseExecutor(this, transaction);\n    } else {\n      executor = new SimpleExecutor(this, transaction);\n    }\n    if (cacheEnabled) {\n      executor = new CachingExecutor(executor);\n    }\n    executor = (Executor) interceptorChain.pluginAll(executor);\n    return executor;\n  }\n// \u9ed8\u8ba4\u4e3atrue\n</code></pre> <p>\u540c\u65f6ms\u4e2d\u7684useCache\u4e3atrue\uff0c\u624d\u4f1a\u5b9e\u9645\u64cd\u4f5cms\u4e2d\u7684cache</p> <pre><code>// CachingExecutor.java\n  public &lt;E&gt; List&lt;E&gt; query(MappedStatement ms, Object parameterObject, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql)\n      throws SQLException {\n    Cache cache = ms.getCache();\n    if (cache != null) {\n      flushCacheIfRequired(ms);\n      if (ms.isUseCache() &amp;&amp; resultHandler == null) {\n        ensureNoOutParams(ms, boundSql);\n        @SuppressWarnings(\"unchecked\")\n        List&lt;E&gt; list = (List&lt;E&gt;) tcm.getObject(cache, key);\n        if (list == null) {\n          list = delegate.query(ms, parameterObject, rowBounds, resultHandler, key, boundSql);\n          tcm.putObject(cache, key, list); // issue #578 and #116\n        }\n        return list;\n      }\n    }\n    return delegate.query(ms, parameterObject, rowBounds, resultHandler, key, boundSql);\n  }\n// \u9ed8\u8ba4\u4e5f\u4e3atrue\n</code></pre> <p>\u53ef\u4ee5\u770b\u5230\uff0c\u53ea\u6709\u5f53cach\u4e0d\u4e3anull\u624d\u4f1a\u5b9e\u9645\u64cd\u4f5c\u7f13\u5b58\uff0c\u5728\u89e3\u6790mapper.xml\u7684\u65f6\u5019\u624d\u4f1a\u5224\u65ad\u662f\u5426\u8bbe\u7f6e\u4e86cache\u7c7b\u578b</p> <pre><code>// XMLMapperBuilder.java  \nprivate void configurationElement(XNode context) {\n    try {\n      String namespace = context.getStringAttribute(\"namespace\");\n      if (namespace == null || namespace.isEmpty()) {\n        throw new BuilderException(\"Mapper's namespace cannot be empty\");\n      }\n      builderAssistant.setCurrentNamespace(namespace);\n      cacheRefElement(context.evalNode(\"cache-ref\"));\n      cacheElement(context.evalNode(\"cache\"));\n      parameterMapElement(context.evalNodes(\"/mapper/parameterMap\"));\n      resultMapElements(context.evalNodes(\"/mapper/resultMap\"));\n      sqlElement(context.evalNodes(\"/mapper/sql\"));\n      buildStatementFromContext(context.evalNodes(\"select|insert|update|delete\"));\n    } catch (Exception e) {\n      throw new BuilderException(\"Error parsing Mapper XML. The XML location is '\" + resource + \"'. Cause: \" + e, e);\n    }\n  }\n// \u7c7b\u578b\u6709\u5f88\u591a\u79cd\n</code></pre> <p></p>"},{"location":"blog/2024/07/07/springcloudboot%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83%E7%9A%84%E8%87%AA%E5%8A%A8%E5%88%B7%E6%96%B0%E6%9C%BA%E5%88%B6/","title":"springcloud[boot]\u914d\u7f6e\u4e2d\u5fc3\u7684\u81ea\u52a8\u5237\u65b0\u673a\u5236","text":""},{"location":"blog/2024/07/07/springcloudboot%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83%E7%9A%84%E8%87%AA%E5%8A%A8%E5%88%B7%E6%96%B0%E6%9C%BA%E5%88%B6/#_1","title":"\u5b9e\u73b0\u673a\u5236\uff1a","text":""},{"location":"blog/2024/07/07/springcloudboot%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83%E7%9A%84%E8%87%AA%E5%8A%A8%E5%88%B7%E6%96%B0%E6%9C%BA%E5%88%B6/#bean","title":"bean\u5c5e\u6027\u7684\u81ea\u52a8\u5237\u65b0\u539f\u7406\uff1a","text":"<p>\u5728spring2\u7684\u65f6\u5019\uff0c\u65b0\u589e\u4e86\u81ea\u5b9a\u4e49\u4f5c\u7528\u57df\uff0c\u4e5f\u5c31\u662f\u9664\u4e86\u5355\u4f8b\u548c\u539f\u578b\uff0c\u65b0\u589e\u4e86scope\u6ce8\u89e3\u548c\u63a5\u53e3\uff0c\u4ee5\u4fbf\u63d0\u9ad8bean\u7684\u50a8\u5b58\u751f\u547d\u5468\u671f\uff0c\u4e0e\u5b83\u76f8\u5173\u7684\u63a5\u53e3\u548c\u7c7b\u4e3a</p> <p><pre><code>ConfigurableBeanFactory.registerScope, \nCustomScopeConfigurer, \norg.springframework.aop.scope.ScopedProxyFactoryBean, org.springframework.web.context.request.RequestScope,\norg.springframework.web.context.request.SessionScope\n</code></pre> \u5b9e\u73b0\u7684\u57fa\u672c\u539f\u7406\u4e3a - \u5305\u626b\u63cf\u7684\u65f6\u5019\uff0c\u8bc6\u522b\u5230@scope\u63a5\u53e3\u540e\u5c06beandefination\u4fee\u6539\u4e3aScopedProxyFactoryBean\uff0c\u5177\u4f53\u5728 <pre><code>    protected Set&lt;BeanDefinitionHolder&gt; doScan(String... basePackages) {\n        Assert.notEmpty(basePackages, \"At least one base package must be specified\");\n        Set&lt;BeanDefinitionHolder&gt; beanDefinitions = new LinkedHashSet&lt;&gt;();\n        for (String basePackage : basePackages) {\n            Set&lt;BeanDefinition&gt; candidates = findCandidateComponents(basePackage);\n            for (BeanDefinition candidate : candidates) {\n                ScopeMetadata scopeMetadata = this.scopeMetadataResolver.resolveScopeMetadata(candidate);\n                candidate.setScope(scopeMetadata.getScopeName());\n                String beanName = this.beanNameGenerator.generateBeanName(candidate, this.registry);\n                if (candidate instanceof AbstractBeanDefinition abstractBeanDefinition) {\n                    postProcessBeanDefinition(abstractBeanDefinition, beanName);\n                }\n                if (candidate instanceof AnnotatedBeanDefinition annotatedBeanDefinition) {\n                    AnnotationConfigUtils.processCommonDefinitionAnnotations(annotatedBeanDefinition);\n                }\n                // \u4e5f\u5c31\u662f\u5728\u8fd9\u91cc\uff0c\u627e\u5230\u6240\u6709scope\u6ce8\u89e3\u7684\u7c7b\uff0c\u5c06\u5b9a\u4e49\u66f4\u6362\u4e3aScopedProxyFactoryBean\n                if (checkCandidate(beanName, candidate)) {\n                    BeanDefinitionHolder definitionHolder = new BeanDefinitionHolder(candidate, beanName);\n                    definitionHolder =\n                            AnnotationConfigUtils.applyScopedProxyMode(scopeMetadata, definitionHolder, this.registry);\n                    beanDefinitions.add(definitionHolder);\n                    registerBeanDefinition(definitionHolder, this.registry);\n                }\n            }\n        }\n        return beanDefinitions;\n    }\n</code></pre> \u8ddf\u8fdb\u53bb\u4ee3\u7801\u53d1\u73b0 <pre><code>    public static BeanDefinitionHolder createScopedProxy(BeanDefinitionHolder definition, BeanDefinitionRegistry registry, boolean proxyTargetClass) {\n        String originalBeanName = definition.getBeanName();\n        BeanDefinition targetDefinition = definition.getBeanDefinition();\n        String targetBeanName = getTargetBeanName(originalBeanName);\n        // \u53ef\u4ee5\u53d1\u73b0\uff0c\u5728\u8fd9\u91cc\u521b\u5efa\u4e86ScopedProxyFactoryBean\u7684bean\u5b9a\u4e49\n        RootBeanDefinition proxyDefinition = new RootBeanDefinition(ScopedProxyFactoryBean.class);\n        // \u5c06\u539f\u59cb\u7c7b\u8bbe\u7f6e\u8fdb\u53bb\uff0c\u4e5f\u5c31\u662f\u88abscope\u6ce8\u89e3\u7684\u7c7b\n        proxyDefinition.setDecoratedDefinition(new BeanDefinitionHolder(targetDefinition, targetBeanName));\n        proxyDefinition.setOriginatingBeanDefinition(targetDefinition);\n        proxyDefinition.setSource(definition.getSource());\n        proxyDefinition.setRole(targetDefinition.getRole());\n        proxyDefinition.getPropertyValues().add(\"targetBeanName\", targetBeanName);\n        if (proxyTargetClass) {\n            targetDefinition.setAttribute(AutoProxyUtils.PRESERVE_TARGET_CLASS_ATTRIBUTE, Boolean.TRUE);\n        } else {\n            proxyDefinition.getPropertyValues().add(\"proxyTargetClass\", Boolean.FALSE);\n        }\n\n        proxyDefinition.setAutowireCandidate(targetDefinition.isAutowireCandidate());\n        proxyDefinition.setPrimary(targetDefinition.isPrimary());\n        if (targetDefinition instanceof AbstractBeanDefinition abd) {\n            proxyDefinition.copyQualifiersFrom(abd);\n        }\n\n        targetDefinition.setAutowireCandidate(false);\n        targetDefinition.setPrimary(false);\n        registry.registerBeanDefinition(targetBeanName, targetDefinition);\n        return new BeanDefinitionHolder(proxyDefinition, originalBeanName, definition.getAliases());\n    }\n</code></pre> \u90a3\u4e48\uff0cScopedProxyFactoryBean\u505a\u4e86\u4ec0\u4e48\u5462\uff1f\u4e3a\u4ec0\u4e48\u8981\u4fee\u6539\u4e3a\u8fd9\u4e2a\u7c7b\uff0c\u6211\u4eec\u770b\u770b\u8fd9\u4e2a\u7c7b\u7684\u7ed3\u6784 <pre><code>// \u53ef\u4ee5\u770b\u5230\uff0c\u5b9e\u73b0\u4e86FactoryBean\uff08\u80af\u5b9a\u7684\uff0c\u4e0d\u7136\u600e\u4e48\u83b7\u53d6bean\uff0c\u53ea\u662f\u5c06\u539f\u59cbbean\u4f5c\u4e86\u8fdb\u4e00\u6b65\u5305\u88c5\uff09\uff0c\u8fd8\u6709BeanFactoryAware\uff0c\u8fd9\u4e2a\u662f\u4e3a\u4e86\u83b7\u53d6\u5230BeanFactory\u4ece\u800c\u83b7\u53d6\u5230\u5b9e\u4f8bbean\uff0cAopInfrastructureBean\u8fd9\u4e2a\u63a5\u53e3\u8868\u660e\u8fd9\u4e2a\u7c7b\u53ef\u4ee5\u5b9e\u73b0aop\u7684\u903b\u8f91\uff0c\u6807\u8bb0\u4e0d\u4f1a\u88abaop\u81ea\u5df1\u5305\u88c5\uff0c\u5b9e\u73b0\u8fd9\u4e2a\u63a5\u53e3\u7684\u8fd8\u6709\u975e\u5e38\u91cd\u8981\u7684InfrastructureAdvisorAutoProxyCreator\u548cAspectJAwareAdvisorAutoProxyCreator\uff0c\u4e00\u4e2a\u662fspring\u81ea\u5e26\u7684aop\uff0c\u4e00\u4e2a\u662f\u542f\u7528AspectJ\u7684aop\uff0c\u8fd9\u90e8\u5206\u5185\u5bb9\u4e5f\u5f88\u6709\u8da3\uff0c\u6709\u65f6\u95f4\u518d\u66f4\u65b0\u4e00\u7bc7\u5173\u4e8espringaop\u7684\u6587\u7ae0\npublic class ScopedProxyFactoryBean extends ProxyConfig implements FactoryBean&lt;Object&gt;, BeanFactoryAware, AopInfrastructureBean\n</code></pre> \u65e2\u7136\u5b9e\u73b0\u4e86FactoryBean\uff0c\u6211\u4eec\u770b\u770b\u8fd9\u91cc\u83b7\u53d6\u7684bean\u505a\u4e86\u4ec0\u4e48\u5904\u7406\uff0c\u5f88\u7b80\u5355\uff0c\u9996\u5148\uff0c\u5728\u8bbe\u7f6eBeanFactory\u7684\u65f6\u5019\u751f\u6210\u4ee3\u7406 <pre><code>    public void setBeanFactory(BeanFactory beanFactory) {\n        if (beanFactory instanceof ConfigurableBeanFactory cbf) {\n            this.scopedTargetSource.setBeanFactory(beanFactory);\n            ProxyFactory pf = new ProxyFactory();\n            pf.copyFrom(this);\n            pf.setTargetSource(this.scopedTargetSource);\n            Assert.notNull(this.targetBeanName, \"Property 'targetBeanName' is required\");\n            Class beanType = beanFactory.getType(this.targetBeanName);\n            if (beanType == null) {\n                throw new IllegalStateException(\"Cannot create scoped proxy for bean '\" + this.targetBeanName + \"': Target type could not be determined at the time of proxy creation.\");\n            } else {\n                if (!this.isProxyTargetClass() || beanType.isInterface() || Modifier.isPrivate(beanType.getModifiers())) {\n                    pf.setInterfaces(ClassUtils.getAllInterfacesForClass(beanType, cbf.getBeanClassLoader()));\n                }\n\n                ScopedObject scopedObject = new DefaultScopedObject(cbf, this.scopedTargetSource.getTargetBeanName());\n                pf.addAdvice(new DelegatingIntroductionInterceptor(scopedObject));\n                pf.addInterface(AopInfrastructureBean.class);\n                this.proxy = pf.getProxy(cbf.getBeanClassLoader());\n            }\n        } else {\n            throw new IllegalStateException(\"Not running in a ConfigurableBeanFactory: \" + beanFactory);\n        }\n    }\n</code></pre> \u7136\u540e\u83b7\u53d6bean\u7684\u65f6\u5019\u8fd4\u56de\u4ee3\u7406 <pre><code>    public Object getObject() {\n        if (this.proxy == null) {\n            throw new FactoryBeanNotInitializedException();\n        } else {\n            return this.proxy;\n        }\n    }\n</code></pre> \u751f\u6210\u7684\u4ee3\u7406\u6709\u4ec0\u4e48\u7528\u5462\uff1f\u8fdb\u4e00\u6b65\u770b\u770b\u4ee3\u7406\u7c7b\u7684\u903b\u8f91\uff0c\u5176\u5b9e\u5c31\u662f\u5728\u6bcf\u6b21\u8c03\u7528\u65b9\u6cd5\u7684\u65f6\u5019\uff0c\u4f1a\u5148\u8fdb\u5165aop\u56de\u8c03\u65b9\u6cd5\uff0c\u53bb\u83b7\u53d6\u539f\u59cb\u5bf9\u8c61 <pre><code>        public Object intercept(Object proxy, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {\n            Object oldProxy = null;\n            boolean setProxyContext = false;\n            Object target = null;\n            TargetSource targetSource = this.advised.getTargetSource();\n            try {\n                if (this.advised.exposeProxy) {\n                    // Make invocation available if necessary.\n                    oldProxy = AopContext.setCurrentProxy(proxy);\n                    setProxyContext = true;\n                }\n                //\u4e5f\u5c31\u662f\u8fd9\u91cc\uff0c\u83b7\u53d6beanfactory\u83b7\u53d6\u539f\u59cb\u5bf9\u8c61\n                target = targetSource.getTarget();\n                Class&lt;?&gt; targetClass = (target != null ? target.getClass() : null);\n                List&lt;Object&gt; chain = this.advised.getInterceptorsAndDynamicInterceptionAdvice(method, targetClass);\n                Object retVal;\n\n                if (chain.isEmpty()) {\n\n                    Object[] argsToUse = AopProxyUtils.adaptArgumentsIfNecessary(method, args);\n                    retVal = AopUtils.invokeJoinpointUsingReflection(target, method, argsToUse);\n                }\n                else {\n                    // We need to create a method invocation...\n                    retVal = new CglibMethodInvocation(proxy, target, method, args, targetClass, chain, methodProxy).proceed();\n                }\n                return processReturnType(proxy, target, method, args, retVal);\n            }\n            finally {\n                if (target != null &amp;&amp; !targetSource.isStatic()) {\n                    targetSource.releaseTarget(target);\n                }\n                if (setProxyContext) {\n                    // Restore old proxy.\n                    AopContext.setCurrentProxy(oldProxy);\n                }\n            }\n        }\n</code></pre> \u90a3\u4e48\u95ee\u9898\u56de\u5230\u5f00\u59cb\uff0c\u54ea\u91cc\u8d77\u5230\u4e86\u52a8\u6001\u5237\u65b0\u5462\uff1f\u5176\u5b9e\u5982\u679c\u5728\u914d\u7f6e\u4e2d\u5fc3\u7684\u914d\u7f6e\u6539\u53d8\u65f6\u5019\uff0c\u5c06bean\u9500\u6bc1\u6389\uff0c\u90a3\u4e48\u4e0b\u6b21\u8c03\u7528\u7684\u65f6\u5019\u53bb\u83b7\u53d6\u4e0d\u662f\u5c31\u53ef\u4ee5\u83b7\u53d6\u6700\u65b0\u7684bean\u5417\uff0c\u786e\u5b9e\uff0cspringcoud\u5c31\u662f\u8fd9\u4e2a\u505a\u7684\uff0cspringcloud\u4f7f\u7528refreshscope\u6ce8\u89e3\u914d\u5408RefreshScope\u7c7b\uff0crefreshscope\u6ce8\u89e3\u5c06\u5305\u88c5\u4e3aScopedProxyFactoryBean\uff0cRefreshScope\u7c7b\u8d1f\u8d23\u5904\u7406bean\u7684\u751f\u547d\u5468\u671f\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u83b7\u53d6\u7684bean\u4e0d\u5728\u662f\u53bb\u539f\u59cb\u7684beanfacroty\u4e2d\u83b7\u53d6\uff0c\u800c\u662f\u5230RefreshScope\u4e2d\u83b7\u53d6\uff0c\u6e90\u7801\u5982\u4e0b <pre><code>if (mbd.isSingleton()) {\n    sharedInstance = getSingleton(beanName, () -&gt; {\n        try {\n            return createBean(beanName, mbd, args);\n        }\n        catch (BeansException ex) {\n            // Explicitly remove instance from singleton cache: It might have been put there\n            // eagerly by the creation process, to allow for circular reference resolution.\n            // Also remove any beans that received a temporary reference to the bean.\n            destroySingleton(beanName);\n            throw ex;\n        }\n    });\n    beanInstance = getObjectForBeanInstance(sharedInstance, name, beanName, mbd);\n}\n\nelse if (mbd.isPrototype()) {\n    // It's a prototype -&gt; create a new instance.\n    Object prototypeInstance = null;\n    try {\n        beforePrototypeCreation(beanName);\n        prototypeInstance = createBean(beanName, mbd, args);\n    }\n    finally {\n        afterPrototypeCreation(beanName);\n    }\n    beanInstance = getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);\n}\n\nelse {\n\n    String scopeName = mbd.getScope();\n    if (!StringUtils.hasLength(scopeName)) {\n        throw new IllegalStateException(\"No scope name defined for bean '\" + beanName + \"'\");\n    }\n    Scope scope = this.scopes.get(scopeName);\n    if (scope == null) {\n        throw new IllegalStateException(\"No Scope registered for scope name '\" + scopeName + \"'\");\n    }\n    try {\n        // \u4e5f\u5c31\u662f\u8fd9\u91cc\uff0c\u5f53\u4e0d\u662f\u5355\u4f8b\u548c\u539f\u578b\u7684\u65f6\u5019\uff0c\u53bbscope\u83b7\u53d6\n        Object scopedInstance = scope.get(beanName, () -&gt; {\n            beforePrototypeCreation(beanName);\n            try {\n                return createBean(beanName, mbd, args);\n            }\n            finally {\n                afterPrototypeCreation(beanName);\n            }\n        });\n        beanInstance = getObjectForBeanInstance(scopedInstance, name, beanName, mbd);\n    }\n    catch (IllegalStateException ex) {\n        throw new ScopeNotActiveException(beanName, scopeName, ex);\n    }\n}\n</code></pre> scope\u662f\u5728RefreshScope\u4e2d\u88ab\u6ce8\u518c\u7684\uff0c\u56e0\u4e3a\u5b9e\u73b0\u4e86BeanFactoryPostProcessor, BeanDefinitionRegistryPostProcessor <pre><code>@Override\npublic void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {\n    this.beanFactory = beanFactory;\n    // \u5c06RefreshScope\u6ce8\u518c\u8fdb\u53bb\uff0c\u4ee5\u4fbf\u4e0a\u9762\u65b9\u4fbf\u83b7\u53d6\u548c\u8c03\u7528Scope scope = this.scopes.get(scopeName);\n    beanFactory.registerScope(this.name, this);\n    setSerializationId(beanFactory);\n}\n@Override\npublic void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) throws BeansException {\n    for (String name : registry.getBeanDefinitionNames()) {\n        BeanDefinition definition = registry.getBeanDefinition(name);\n        if (definition instanceof RootBeanDefinition root) {\n            if (root.getDecoratedDefinition() != null &amp;&amp; root.hasBeanClass()\n                    &amp;&amp; root.getBeanClass() == ScopedProxyFactoryBean.class) {\n                if (getName().equals(root.getDecoratedDefinition().getBeanDefinition().getScope())) {\n                    // \u8fd9\u91cc\u5176\u5b9e\u662f\u628a\u5305\u626b\u63cf\u8fdb\u53bb\u7684ScopedProxyFactoryBean\u8fdb\u4e00\u6b65\u66f4\u6362\u4e3aLockedScopedProxyFactoryBean\uff0c\u5f53\u7136\u7684\u662frefresh\u60c5\u51b5\u4e0b\uff0c\u4e3a\u4e86\u52a0\u4e0b\u9501\uff0c\u8fd9\u91cc\u903b\u8f91\u4e0d\u91cd\u8981\n                    root.setBeanClass(LockedScopedProxyFactoryBean.class);\n                    root.getConstructorArgumentValues().addGenericArgumentValue(this);\n                    // surprising that a scoped proxy bean definition is not already\n                    // marked as synthetic?\n                    root.setSynthetic(true);\n                }\n            }\n        }\n    }\n}\n</code></pre> okok\uff0c\u7ec8\u4e8e\u5230\u8fd9\u91cc\u4e86\uff0c\u4f11\u606f\u4e00\u4e0b\uff0c\u6211\u4eec\u56de\u987e\u4e00\u4e0b\u4e0a\u9762\u505a\u4e86\u4ec0\u4e48\uff1f - \u5c06\u6807\u6ce8\u4e86@refreshscope\u7684bean\u5305\u88c5\u4e3aLockedScopedProxyFactoryBean\uff0c\u4ea7\u751f\u6bcf\u6b21\u8c03\u7528\u65b9\u6cd5\u90fd\u53bbRefreshScope\u4e2d\u83b7\u53d6bean\u5bf9\u8c61 - RefreshScope\u662fspringcloud\u6ce8\u518c\u8fdb\u53bb\u7684\uff0c\u5728springcoud-context\u4e2d\u7684\u81ea\u52a8\u914d\u7f6e\u7c7b\u4e2d\uff0c\u6ce8\u518c\u5230beanfactory\u4e2d \u90a3\u4e48\u95ee\u9898\u6765\u4e86\uff0c\u4e3a\u4ec0\u4e48\u6bcf\u6b21\u83b7\u53d6\u7684\u65f6\u5019\u90fd\u662f\u6700\u65b0\u5bf9\u8c61\u5462\uff0c\u6211\u4eec\u81ea\u7136\u800c\u7136\u60f3\u5230\u7684\u662f\uff0c\u6bcf\u6b21\u5237\u65b0\u914d\u7f6e\u7684\u65f6\u5019\uff0c\u5c06RefreshScope\u4fdd\u5b58\u7684bean\u9500\u6bc1\uff0c\u7136\u540e\u4e0b\u6b21\u8c03\u7528\u65b9\u6cd5\u7684\u65f6\u5019\u5c31\u4f1a\u83b7\u53d6\u5230\u6700\u65b0\u7684bean\u4e86\uff0c\u8fd9\u91cc\u4e5f\u662f\u8fd9\u4e48\u505a\u7684\uff0c\u6bcf\u6b21\u5237\u65b0\u7684\u65f6\u5019\u90fd\u4f1a\u901a\u77e5RefreshScope\u8fdb\u884c\u9500\u6bc1\uff0c\u6e90\u7801\u5982\u4e0b\uff0c <pre><code>public void refreshAll() {\n    super.destroy();\n    this.context.publishEvent(new RefreshScopeRefreshedEvent());\n}\n@Override\npublic void destroy() {\n    List&lt;Throwable&gt; errors = new ArrayList&lt;&gt;();\n    // \u8c03\u7528refreshAll\u540e\u4f1a\u6e05\u7406\u6240\u6709\u7f13\u5b58\uff0c\u6240\u4ee5\u4e0b\u6b21\u83b7\u53d6\u7684\u65f6\u5019\u662f\u6700\u65b0\u7684\n    Collection&lt;BeanLifecycleWrapper&gt; wrappers = this.cache.clear();\n    for (BeanLifecycleWrapper wrapper : wrappers) {\n        try {\n            Lock lock = this.locks.get(wrapper.getName()).writeLock();\n            lock.lock();\n            try {\n                wrapper.destroy();\n            }\n            finally {\n                lock.unlock();\n            }\n        }\n        catch (RuntimeException e) {\n            errors.add(e);\n        }\n    }\n    if (!errors.isEmpty()) {\n        throw wrapIfNecessary(errors.get(0));\n    }\n    this.errors.clear();\n}\n</code></pre> \u90a3\u4e48\u4ec0\u4e48\u65f6\u5019\u8c03\u7528\u7684\u5462\uff1f\u5728ConfigDataContextRefresher\u4e2d\u53ef\u4ee5\u770b\u5230\u8c03\u7528 <pre><code>public synchronized Set&lt;String&gt; refresh() {\n    Set&lt;String&gt; keys = refreshEnvironment();\n    this.scope.refreshAll();\n    return keys;\n}\n// springcloud\u5c06RefreshScope\u6ce8\u518c\u8fdb\u6765\n@Bean\n@ConditionalOnMissingBean\n@ConditionalOnBootstrapDisabled\npublic ConfigDataContextRefresher configDataContextRefresher(ConfigurableApplicationContext context,\n        RefreshScope scope, RefreshProperties properties) {\n    return new ConfigDataContextRefresher(context, scope, properties);\n}\n</code></pre> ConfigDataContextRefresher\u53c8\u662f\u8c01\u8c03\u7528\u7684\u5462\uff1f\u5728RefreshEventListener\u4e2d\u53ef\u4ee5\u770b\u5230 <pre><code>@Override\npublic void onApplicationEvent(ApplicationEvent event) {\n    if (event instanceof ApplicationReadyEvent) {\n        handle((ApplicationReadyEvent) event);\n    }\n    // \u63a5\u6536\u5230RefreshEvent\u540e\u5237\u65b0\n    else if (event instanceof RefreshEvent) {\n        handle((RefreshEvent) event);\n    }\n}\n\npublic void handle(ApplicationReadyEvent event) {\n    this.ready.compareAndSet(false, true);\n}\n\npublic void handle(RefreshEvent event) {\n    if (this.ready.get()) { // don't handle events before app is ready\n        log.debug(\"Event received \" + event.getEventDesc());\n        Set&lt;String&gt; keys = this.refresh.refresh();\n        log.info(\"Refresh keys changed: \" + keys);\n    }\n}\n//springcloud \u5c06\u4e0a\u9762\u7684ConfigDataContextRefresher\u6ce8\u5165\u8fdb\u6765\n@Bean\npublic RefreshEventListener refreshEventListener(ContextRefresher contextRefresher) {\n    return new RefreshEventListener(contextRefresher);\n}\n</code></pre> \u6700\u540eRefreshEvent\u4e8b\u4ef6\u662f\u8c01\u53d1\u5e03\u7684\u5462\uff1f\u5728\u6211\u4eec\u5f15\u5165nacos-config\u4f9d\u8d56\u4e4b\u540e\uff0c\u4f1a\u6ce8\u5165\u4e00\u4e2abean\uff0c\u770b\u8d77\u6765\u6709\u5173\uff0c\u6211\u4eec\u8fdb\u53bb\u770b\u770b <pre><code>@Bean\npublic NacosContextRefresher nacosContextRefresher(\n        NacosConfigManager nacosConfigManager,\n        NacosRefreshHistory nacosRefreshHistory) {\n    // Consider that it is not necessary to be compatible with the previous\n    // configuration\n    // and use the new configuration if necessary.\n    return new NacosContextRefresher(nacosConfigManager, nacosRefreshHistory);\n}\n\nprivate void registerNacosListener(final String groupKey, final String dataKey) {\n    String key = NacosPropertySourceRepository.getMapKey(dataKey, groupKey);\n    Listener listener = listenerMap.computeIfAbsent(key,\n            lst -&gt; new AbstractSharedListener() {\n                @Override\n                public void innerReceive(String dataId, String group,\n                        String configInfo) {\n                    refreshCountIncrement();\n                    nacosRefreshHistory.addRefreshRecord(dataId, group, configInfo);\n                    NacosSnapshotConfigManager.putConfigSnapshot(dataId, group,\n                            configInfo);\n                    // \u53ef\u4ee5\u770b\u5230\uff0c\u6bcf\u6b21\u914d\u7f6e\u66f4\u65b0\u7684\u65f6\u5019\u4f1a\u53d1\u5e03RefreshEvent\u4e8b\u4ef6\n                    applicationContext.publishEvent(\n                            new RefreshEvent(this, null, \"Refresh Nacos config\"));\n                    if (log.isDebugEnabled()) {\n                        log.debug(String.format(\n                                \"Refresh Nacos config group=%s,dataId=%s,configInfo=%s\",\n                                group, dataId, configInfo));\n                    }\n                }\n            });\n    try {\n        configService.addListener(dataKey, groupKey, listener);\n        log.info(\"[Nacos Config] Listening config: dataId={}, group={}\", dataKey,\n                groupKey);\n    }\n    catch (NacosException e) {\n        log.warn(String.format(\n                \"register fail for nacos listener ,dataId=[%s],group=[%s]\", dataKey,\n                groupKey), e);\n    }\n}\n</code></pre> ook\uff0c\u7ec8\u4e8e\u5230\u5934\u4e86\uff0c\u4e5f\u5c31\u662f\u6bcf\u6b21nacos\u66f4\u65b0\u914d\u7f6e\u7684\u65f6\u5019\uff0c\u90fd\u4f1a\u53d1\u5e03RefreshEvent\u4e8b\u4ef6\uff0c\u7136\u540eRefreshEventListener\u63a5\u6536\u4e8b\u4ef6\u8c03\u7528ConfigDataContextRefresher\u4e2d\u7684refresh\uff0c\u8fdb\u4e00\u6b65\u8c03\u7528RefreshScope\u4e2d\u7684refresh\uff0c\u7136\u540e\u5c31\u5c06\u7f13\u5b58\u6e05\u7a7a\u4e86\uff0c\u4e0b\u6b21\u83b7\u53d6\u5c31\u662f\u6700\u65b0\u7684\u4e86</p>"},{"location":"blog/2024/07/07/springcloudboot%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83%E7%9A%84%E8%87%AA%E5%8A%A8%E5%88%B7%E6%96%B0%E6%9C%BA%E5%88%B6/#_2","title":"\u8fd8\u6709\u4e00\u4ef6\u4e8b\uff0c\u5237\u65b0\u8fc7\u7a0b\u6211\u4eec\u770b\u770b","text":"<pre><code>public synchronized Set&lt;String&gt; refresh() {\n    Set&lt;String&gt; keys = refreshEnvironment();\n    this.scope.refreshAll();\n    return keys;\n}\n// \u8fd9\u91cc\u5237\u65b0\u73af\u5883\u7684\u65f6\u5019\u8fd8\u4f1a\u53d1\u51faEnvironmentChangeEvent\u4e8b\u4ef6\uff0c\u8fd9\u662fnacos\u4e2dConfigurationPropertiesRebinder\u7684\u4e8b\u4ef6\u6e90\uff0c\u4f1a\u4ece\u65b0\u8bbe\u7f6e\u6240\u6709ConfigurationPropertiesBeans\npublic synchronized Set&lt;String&gt; refreshEnvironment() {\n    Map&lt;String, Object&gt; before = extract(this.context.getEnvironment().getPropertySources());\n    updateEnvironment();\n    Set&lt;String&gt; keys = changes(before, extract(this.context.getEnvironment().getPropertySources())).keySet();\n    this.context.publishEvent(new EnvironmentChangeEvent(this.context, keys));\n    return keys;\n}\n\n//\u4e5f\u5c31\u662f\u8fd9\u91cc\n@Bean\n@ConditionalOnMissingBean(search = SearchStrategy.CURRENT)\n@ConditionalOnNonDefaultBehavior\npublic ConfigurationPropertiesRebinder smartConfigurationPropertiesRebinder(\n        ConfigurationPropertiesBeans beans) {\n    // If using default behavior, not use SmartConfigurationPropertiesRebinder.\n    // Minimize te possibility of making mistakes.\n    return new SmartConfigurationPropertiesRebinder(beans);\n}\n\u5185\u90e8\u4e3a\uff1a\u5b83\u4f1a\u6536\u96c6\u6240\u6709\u7684ConfigurationPropertiesBeans\nprivate boolean rebind(String name, ApplicationContext appContext) {\n    try {\n        Object bean = appContext.getBean(name);\n        if (AopUtils.isAopProxy(bean)) {\n            bean = ProxyUtils.getTargetObject(bean);\n        }\n        if (bean != null) {\n            // TODO: determine a more general approach to fix this.\n            // see\n            // https://github.com/spring-cloud/spring-cloud-commons/issues/571\n            if (getNeverRefreshable().contains(bean.getClass().getName())) {\n                return false; // ignore\n            }\n            appContext.getAutowireCapableBeanFactory().destroyBean(bean);\n            appContext.getAutowireCapableBeanFactory().initializeBean(bean, name);\n            return true;\n        }\n    }\n    catch (RuntimeException e) {\n        this.errors.put(name, e);\n        throw e;\n    }\n    catch (Exception e) {\n        this.errors.put(name, e);\n        throw new IllegalStateException(\"Cannot rebind to \" + name, e);\n    }\n    return false;\n}\n</code></pre>"},{"location":"blog/2024/07/07/springcloudboot%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83%E7%9A%84%E8%87%AA%E5%8A%A8%E5%88%B7%E6%96%B0%E6%9C%BA%E5%88%B6/#_3","title":"\u7ed3\u5c3e","text":"<p>\u4e0a\u9762\u5c31\u662frefreshscope\u81ea\u52a8\u5237\u65b0\u7684\u6d41\u7a0b\u4e86\uff0c\u5176\u5b9e\u8fd8\u6709\u4e00\u70b9\uff0cnacos\u662f\u5982\u4f55\u76d1\u542c\u914d\u7f6e\u5237\u65b0\u548c\u53d1\u5e03\u4e8b\u4ef6\u7684\u5462\uff0c\u8fd9\u91cc\u9762\u5c31\u6d89\u53ca\u5230netty\u4e86\uff0c\u5177\u4f53\u6765\u8bf4\uff0cnacoa\u4f1a\u6709\u4e00\u4e2a\u5b9a\u65f6\u4efb\u52a1\u53bb\u67e5\u770b\u662f\u5426\u7531\u914d\u7f6e\u7684\u66f4\u6539 <pre><code>@Override\npublic void startInternal() {\n    executor.schedule(() -&gt; {\n        while (!executor.isShutdown() &amp;&amp; !executor.isTerminated()) {\n            try {\n                listenExecutebell.poll(5L, TimeUnit.SECONDS);\n                if (executor.isShutdown() || executor.isTerminated()) {\n                    continue;\n                }\n                //\u8fd9\u91cc\n                executeConfigListen();\n            } catch (Throwable e) {\n                LOGGER.error(\"[rpc listen execute] [rpc listen] exception\", e);\n                try {\n                    Thread.sleep(50L);\n                } catch (InterruptedException interruptedException) {\n                    //ignore\n                }\n                notifyListenConfig();\n            }\n        }\n    }, 0L, TimeUnit.MILLISECONDS);\n\n}\n</code></pre> netty\u8fd8\u6ca1\u5b66\uff0c\u4e0b\u6b21\u518d\u8fdb\u4e00\u6b65\u770b\u770b\uff0c\u5f53\u7136\u8fd8\u6709bootstrap\u4e2d\u5982\u4f55\u5c06\u8fdc\u7a0b\u914d\u7f6e\u62c9\u53bb\uff0c\u4ee5\u53caEnvironmentPostProcessorApplicationListener\u4e2d\u83b7\u53d6\u914d\u7f6e\u4e5f\u8981\u5199\u5199\uff0c\u548c\u914d\u7f6e\u62c9\u53bb\u4e5f\u6709\u5173\uff0c\u56e0\u4e3aspringboot2.4\uff1f\u4e4b\u540e\u5c06bootstrap\u53d6\u6d88\uff0c\u63d0\u51fa\u4e86EnvironmentPostProcessorApplicationListener\uff0c\u66f4\u65b9\u4fbf\u7684\u914d\u7f6e\u5bfc\u5165</p>"},{"location":"blog/archive/2024/","title":"2024","text":""},{"location":"blog/category/%E5%A4%87%E5%BF%98%E7%AC%94%E8%AE%B0/","title":"\u5907\u5fd8\u7b14\u8bb0","text":""},{"location":"blog/category/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/","title":"\u6e90\u7801\u9605\u8bfb","text":""},{"location":"blog/category/%E5%B0%8F%E5%B7%A5%E5%85%B7/","title":"\u5c0f\u5de5\u5177","text":""},{"location":"blog/category/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/","title":"\u5237\u9898\u7b14\u8bb0","text":""},{"location":"blog/page/2/","title":"Blog","text":""},{"location":"blog/archive/2024/page/2/","title":"2024","text":""}]}